// SPDX-FileCopyrightText: 2021 SAP SE or an SAP affiliate company and Gardener contributors.
//
// SPDX-License-Identifier: Apache-2.0

package componentoverwrites

import (
	"fmt"

	cdv2 "github.com/gardener/component-spec/bindings-go/apis/v2"

	lsv1alpha1 "github.com/gardener/landscaper/apis/core/v1alpha1"
	"github.com/gardener/landscaper/pkg/components/model/types"
)

type cdRefAspect string

const (
	RepoCtx       cdRefAspect = "RepositoryContext"
	ComponentName cdRefAspect = "ComponentName"
	Version       cdRefAspect = "Version"
)

// ComponentDescriptorReferenceDiff represents a diff between two component descriptor references. It is meant to be used to describe the changes in a component descriptor reference which has been overwritten.
// It should be generated by using the ReferenceDiff function.
// It implements the Stringer interface and will produce a human-readable description of the changes between the two references.
type ComponentDescriptorReferenceDiff struct {
	overwritten                              map[cdRefAspect]bool
	oldRepoCtx, newRepoCtx                   *types.UnstructuredTypedObject
	oldName, newName, oldVersion, newVersion string
}

// newComponentDescriptorReferenceDiff initializes a new ComponentDescriptorReferenceDiff object.
func newComponentDescriptorReferenceDiff() *ComponentDescriptorReferenceDiff {
	return &ComponentDescriptorReferenceDiff{
		overwritten: make(map[cdRefAspect]bool, 3),
	}
}

// IsOverwritten returns whether the given aspect of the reference has been overwritten.
func (d *ComponentDescriptorReferenceDiff) IsOverwritten(aspect cdRefAspect) bool {
	return d.overwritten[aspect]
}

// IsAnyOverwritten returns true if any part of the reference has been overwritten.
func (d *ComponentDescriptorReferenceDiff) IsAnyOverwritten() bool {
	for _, elem := range d.overwritten {
		if elem {
			return true
		}
	}
	return false
}

// overwriteRepoCtx marks the repository context as overwritten.
func (d *ComponentDescriptorReferenceDiff) overwriteRepoCtx(old, new *types.UnstructuredTypedObject) {
	d.oldRepoCtx = old
	d.newRepoCtx = new
	d.overwritten[RepoCtx] = true
}

// GetRepoCtxOverwrite returns the old and the new repository contexts. If not overwritten, both will be nil.
func (d *ComponentDescriptorReferenceDiff) GetRepoCtxOverwrite() (*types.UnstructuredTypedObject, *types.UnstructuredTypedObject) {
	return d.oldRepoCtx, d.newRepoCtx
}

// overwriteComponentName marks the component name as overwritten.
func (d *ComponentDescriptorReferenceDiff) overwriteComponentName(old, new string) {
	d.oldName = old
	d.newName = new
	d.overwritten[ComponentName] = true
}

// GetComponentNameOverwrite returns the old and the new component names. If not overwritten, both will be empty.
func (d *ComponentDescriptorReferenceDiff) GetComponentNameOverwrite() (string, string) {
	return d.oldName, d.newName
}

// overwriteVersion marks the component version as overwritten.
func (d *ComponentDescriptorReferenceDiff) overwriteVersion(old, new string) {
	d.oldVersion = old
	d.newVersion = new
	d.overwritten[Version] = true
}

// GetVersionOverwrite returns the old and the new component versions. If not overwritten, both will be empty.
func (d *ComponentDescriptorReferenceDiff) GetVersionOverwrite() (string, string) {
	return d.oldVersion, d.newVersion
}

// OverwriteToString returns a human-readable description of whether the given aspect of the component descriptor reference has been overwritten.
// If the second argument is true, a string describing that no overwrite happened will be returned if the aspect has not been overwritten. Otherwise, an empty string will be returned in these cases.
func (d *ComponentDescriptorReferenceDiff) OverwriteToString(aspect cdRefAspect, textOnNotOverwritten bool) string {
	if !d.IsOverwritten(aspect) {
		if !textOnNotOverwritten {
			return ""
		}
		return fmt.Sprintf("%s has not been overwritten", string(aspect))
	}
	var old, new string
	switch aspect {
	case RepoCtx:
		oldCtx, newCtx := d.GetRepoCtxOverwrite()
		return repositoryContextDiff(oldCtx, newCtx)
	case ComponentName:
		old, new = d.GetComponentNameOverwrite()
	case Version:
		old, new = d.GetVersionOverwrite()
	}
	return fmt.Sprintf("%s -> %s", old, new)
}

// String returns a human-readable description of which parts of the component descriptor reference have been overwritten.
func (d *ComponentDescriptorReferenceDiff) String() string {
	if d.IsAnyOverwritten() {
		return fmt.Sprintf(`Component reference has been overwritten:
%s
%s
%s`, d.OverwriteToString(RepoCtx, true), d.OverwriteToString(ComponentName, true), d.OverwriteToString(Version, true))
	}
	return "Component reference has not been overwritten."
}

// ReferenceDiff returns a ComponentDescriptorReferenceDiff object, which contains information on which parts of a component reference have been overwritten.
// It can also produce a human-readable description of the diff.
func ReferenceDiff(oldRef, newRef *lsv1alpha1.ComponentDescriptorReference) *ComponentDescriptorReferenceDiff {
	res := newComponentDescriptorReferenceDiff()

	if !cdv2.UnstructuredTypesEqual(oldRef.RepositoryContext, newRef.RepositoryContext) {
		res.overwriteRepoCtx(oldRef.RepositoryContext, newRef.RepositoryContext)
	}
	if oldRef.ComponentName != newRef.ComponentName {
		res.overwriteComponentName(oldRef.ComponentName, newRef.ComponentName)
	}
	if oldRef.Version != newRef.Version {
		res.overwriteVersion(oldRef.Version, newRef.Version)
	}
	return res
}

func repositoryContextDiff(oldCtx, newCtx *types.UnstructuredTypedObject) string {
	if oldCtx == nil {
		return "-> " + string(newCtx.Raw)
	}
	defaultDiff := fmt.Sprintf("%s -> %s", string(oldCtx.Raw), string(newCtx.Raw))
	// use specific behavior if both repository contexts are ociregistries
	if oldCtx.GetType() == cdv2.OCIRegistryType &&
		newCtx.GetType() == cdv2.OCIRegistryType {
		oldOciReg := cdv2.OCIRegistryRepository{}
		if err := oldCtx.DecodeInto(&oldOciReg); err != nil {
			return defaultDiff
		}
		newOciReg := cdv2.OCIRegistryRepository{}
		if err := newCtx.DecodeInto(&newOciReg); err != nil {
			return defaultDiff
		}
		return fmt.Sprintf("%s (%s) -> %s (%s)", oldOciReg.BaseURL, oldOciReg.ComponentNameMapping, newOciReg.BaseURL, newOciReg.ComponentNameMapping)
	}
	return defaultDiff
}
