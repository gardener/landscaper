# SPDX-FileCopyrightText: 2021 SAP SE or an SAP affiliate company and Gardener contributors.
#
# SPDX-License-Identifier: Apache-2.0

apiVersion: landscaper.gardener.cloud/v1alpha1
kind: Installation
metadata:
  name: root
spec:

  componentDescriptor:
    inline:
      meta:
        schemaVersion: v2

      component:
        name: example.com/mock-installation
        version: 1.0.0

        provider: internal

        repositoryContexts:
          - type: ociRegistry
            baseUrl: "example.com/test"

        sources: []
        componentReferences: []

        resources: []

  imports:
    data:
    - name: dataImp
      secretRef:
        key: value
        name: "my-secret"
    targets:
    - name: targetImp
      target: "my-target"
    - name: targetListImp
      targets:
      - "my-target"
      - "my-target"
      - "my-target"
    - name: emptyTargetListImp
      targets: []
    
  importDataMappings:
    mappedImp: myImportMapping
  
  exports:
    data:
    - name: dataExp
      dataRef: dataExp
    - name: additionalDataExp
      dataRef: additionalDataExp
    targets:
    - name: targetExp
      target: targetExp
    - name: targetExpFromList
      target: targetExpFromList

  exportDataMappings:
    additionalDataExp: (( "mapping-" exports.dataExp ))

  blueprint:
    inline:
      filesystem:
        blueprint.yaml: |
          apiVersion: landscaper.gardener.cloud/v1alpha1
          kind: Blueprint

          annotations:
            local/name: root
            local/version: 1.0.0

          imports:
          - name: dataImp
            type: data
            schema:
              type: string
          - name: mappedImp
            type: data
            schema:
              type: string
          - name: targetImp
            type: target
            targetType: landscaper.gardener.cloud/mock
          - name: targetListImp
            type: targetList
            targetType: landscaper.gardener.cloud/mock
          - name: emptyTargetListImp
            type: targetList
            targetType: landscaper.gardener.cloud/mock

          exports:
          - name: dataExp
            type: data
            schema:
              type: string
          - name: targetExp
            type: target
            targetType: landscaper.gardener.cloud/mock
          - name: targetExpFromList
            type: target
            targetType: landscaper.gardener.cloud/mock
          
          exportExecutions:
          - type: GoTemplate
            template: |
              exports:
                dataExp: {{ .values.dataobjects.subDataExp }}
                targetExp: {{ toJson .values.targets.subTargetExp.spec }}
                targetExpFromList: {{ toJson .values.targets.subTargetExpFromList.spec }}

          subinstallations:
          - apiVersion: landscaper.gardener.cloud/v1alpha1
            kind: InstallationTemplate
            name: subinst
            imports:
              data:
              - name: subDataImp
                dataRef: dataImp
              - name: subMappedImp
                dataRef: mappedImp
              targets:
              - name: subTargetImp
                target: targetImp
              - name: subTargetImpFromList
                target: "targetListImp[0]"
              - name: subTargetListImp
                targetListRef: targetListImp
              - name: subEmptyTargetListImp
                targetListRef: emptyTargetListImp
            exports:
              data:
              - name: subDataExp
                dataRef: subDataExp
              targets:
              - name: subTargetExp
                target: subTargetExp
              - name: subTargetExpFromList
                target: subTargetExpFromList
            blueprint:
              filesystem:
                blueprint.yaml: |
                  apiVersion: landscaper.gardener.cloud/v1alpha1
                  kind: Blueprint
                  deployExecutions:
                  - type: Spiff
                    template:
                      deployItems:
                      - name: submain-import
                        type: landscaper.gardener.cloud/mock
                        config:
                          apiVersion: mock.deployer.landscaper.gardener.cloud/v1alpha1
                          kind: ProviderConfiguration
                          providerStatus:
                            apiVersion: mock.deployer.landscaper.gardener.cloud/v1alpha1
                            kind: ProviderStatus
                            importDataMappings: (( imports.subMappedImp ))
                  imports:
                  - name: subDataImp
                    type: data
                    schema:
                      type: string
                  - name: subMappedImp
                    type: data
                    schema:
                      type: string
                  - name: subTargetImp
                    type: target
                    targetType: landscaper.gardener.cloud/mock
                  - name: subTargetImpFromList
                    type: target
                    targetType: landscaper.gardener.cloud/mock
                  - name: subTargetListImp
                    type: targetList
                    targetType: landscaper.gardener.cloud/mock
                  - name: subEmptyTargetListImp
                    type: targetList
                    targetType: landscaper.gardener.cloud/mock
                  exports:
                  - name: subDataExp
                    type: data
                    schema:
                      type: string
                  - name: subTargetExp
                    type: target
                    targetType: landscaper.gardener.cloud/mock
                  - name: subTargetExpFromList
                    type: target
                    targetType: landscaper.gardener.cloud/mock
                  exportExecutions:
                  - type: Spiff
                    template:
                      exports:
                        subDataExp: (( values.dataobjects.subDataImp ))
                        subTargetExp: (( values.targets.subTargetImp.spec ))
                        subTargetExpFromList: (( values.targets.subTargetImpFromList.spec ))
