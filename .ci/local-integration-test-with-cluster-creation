#!/bin/sh

# SPDX-FileCopyrightText: 2022 SAP SE or an SAP affiliate company and Gardener contributors
#
# SPDX-License-Identifier: Apache-2.0

set -o errexit
set -o nounset
set -o pipefail

# Script executing the integration tests (with shoot cluster creation and deletion). It could be executed locally but
# is also called by the Gardener Concours jobs executing the integration tests.
#
# This script executes the following steps:
#
# - install-missing-software: Installs potentially missing software for the subsequent steps.

# - create-shoot-cluster: Creates a new test shoot cluster in the Gardener Canary Landscape in the namespace provided
#   with $2 (e.g. garden-laas) using the kubeconfig located at the file system path provided by $1. The names of all
#   test shoot clusters have the format it-pr$4-<4-digits>, whereby
#   - $4==0 indicates that the script was triggered locally
#   - $4==1 indicates that the script was triggered by a commit to a head update or a new release
#   - otherwise, indicates that the script was triggered by a commit to a PR whereby $4 contains the ID of the PR.
#
# - local-integration-test: calls a script which executes the integration tests on the just created shoot cluster
#
# - delete-shoot-cluster: Deletes the test shoot cluster if all tests succeeded. Otherwise, the cluster is kept for
#   further investigations.
#
# $3 contains the version of the landscaper to be installed. This version is also used in some integration tests.
#
# Currently, the script could not be run against another Gardener landscape than Canary because there is some hard coded
# stuff in the shoot manifest used to create new test shoot clusters.
#
# Before a new test shoot cluster is created, the already existing test clusters in the namespace are checked and
# potentially deleted according to the following strategy:
#
# - If the maximal number of test clusters is larger or equal to $MAX_NUM_CLUSTERS, the script fails and it is required
#   that the test clusters are deleted manually.
# - If the test was triggered by a PR, all existing clusters with a name prefix it-pr$4- are deleted.
# - $DURATION_FOR_CLUSTER_DELETION provides a duration according to the format expected by
#   time.ParseDuration (https://pkg.go.dev/time#ParseDuration). All test clusters older than this duration are deleted.
# - If there are still X test clusters with 'X >= $NUM_CLUSTERS_START_DELETE_OLDEST', the oldest
#   'X - $NUM_CLUSTERS_START_DELETE_OLDEST + 1' test clusters are deleted.
# - The algorithm does not wait until deleted clusters are removed. It just triggers the deletion and continues with
#   the tests.

GARDENER_KUBECONFIG_PATH=$1
NAMESPACE=$2
VERSION=$3
PR_ID=$4

MAX_NUM_CLUSTERS=20
NUM_CLUSTERS_START_DELETE_OLDEST=15
DURATION_FOR_CLUSTER_DELETION=48h

SOURCE_PATH="$(dirname $0)/.."
cd "${SOURCE_PATH}"
SOURCE_PATH="$(pwd)"

echo "Run integration tests with cluster and registry creation"
echo "Source path: ${SOURCE_PATH}"
echo "Gardener kubeconfig path: ${GARDENER_KUBECONFIG_PATH}"
echo "Shoot cluster namespace: ${NAMESPACE}"
echo "Landscaper version: ${VERSION}"

TMP="${SOURCE_PATH}/tmp-int-test-cluster"
rm -f -r $TMP
mkdir -p $TMP
echo "Config directory: ${TMP}"

./.ci/int-test-helper/install-missing-software
./.ci/int-test-helper/create-shoot-cluster $GARDENER_KUBECONFIG_PATH \
  $NAMESPACE \
  $TMP \
  $MAX_NUM_CLUSTERS \
  $NUM_CLUSTERS_START_DELETE_OLDEST \
  $DURATION_FOR_CLUSTER_DELETION \
  $PR_ID

KUBECONFIG_PATH=$TMP/kubeconfig.yaml
echo "Test cluster kubeconfig path: ${KUBECONFIG_PATH}"

./.ci/local-integration-test $KUBECONFIG_PATH $VERSION

./.ci/int-test-helper/delete-shoot-cluster $GARDENER_KUBECONFIG_PATH $NAMESPACE $TMP
