// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../../language-independent/component-descriptor-v2-schema.yaml

package jsonscheme

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _LanguageIndependentComponentDescriptorV2SchemaYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1a\x4b\x6f\xe3\xb8\xf9\xee\x5f\xf1\x61\x13\x80\xce\x24\xb2\x13\xb7\x7b\x18\x5f\x82\x74\x17\x2d\x16\x2d\x36\x40\x66\xda\x43\x13\x77\x40\x4b\x9f\x6d\xa6\x12\xe9\x92\x94\x13\xcd\xe3\xbf\x17\x24\x45\x3d\x6c\x49\x7e\x25\x99\x16\x98\xb9\x8c\x49\x7e\xef\x37\xa9\x9c\xb2\x68\x0c\x64\xa1\xf5\x52\x8d\x87\xc3\x39\x95\x11\x72\x94\x83\x30\x16\x69\x34\x54\xe1\x02\x13\xaa\x86\xa1\x48\x96\x82\x23\xd7\x41\x84\x2a\x94\x6c\xa9\x85\x0c\x56\x23\xd2\x3b\x75\x10\x15\x0a\x8f\x4a\xf0\xc0\xed\x0e\x84\x9c\x0f\x23\x49\x67\x7a\x38\xba\x1c\x5d\x06\x57\xa3\x9c\x20\xe9\x79\x32\x4c\xf0\x31\x90\xbf\xe4\x5c\xe1\x17\xcf\x07\x7e\x2d\xf8\xc0\x6a\x04\x25\xda\x8c\x71\x66\xb0\xd4\xb8\x07\x90\xa0\xa6\xe6\x7f\x00\x9d\x2d\x71\x0c\x44\x4c\x1f\x31\xd4\xc4\x6e\xd5\x59\x14\x1a\x40\xa9\x81\xc5\x8f\xa8\xa6\x0e\x41\xe2\x7f\x52\x26\x31\x72\x14\x01\x02\x20\x8e\xef\x3f\x50\x2a\x26\xb8\x83\x5a\x4a\xb1\x44\xa9\x19\x2a\x0f\x57\x03\xf2\x9b\x85\x48\x4a\x4b\xc6\xe7\xa4\xd7\x03\x88\xe9\x14\xe3\x56\x79\x1b\xd8\x73\x9a\x20\x29\x97\x2b\x1a\xa7\x68\x29\x15\xda\xfc\x4e\x13\xac\x51\xf4\xec\xcc\x56\x42\x9f\xff\x86\x7c\xae\x17\x63\x18\xfd\xfc\xb3\x93\x9e\x6a\x8d\xd2\x18\xe4\x5f\xf7\x34\xf8\x7c\x19\xbc\x1f\x3c\x04\x93\xf3\xfb\xc1\xc4\x2c\x27\x5f\x46\x17\x7f\xfc\x36\xbc\x0f\xdc\xd1\xf0\xd3\x60\xf2\xee\xd4\x32\x64\x11\x72\xcd\x74\x76\xa3\xb5\x64\xd3\x54\xe3\x5f\x31\x73\x7c\x13\xc6\x0b\x26\x2d\x2c\x26\xfd\xfb\xe0\xd3\x79\xfe\xfb\x9d\xdf\x3c\xbb\x76\xa4\x25\xc6\xf4\x19\xa3\x0f\x98\xac\x50\x3a\x9a\x27\xa0\xe9\xbf\x91\xc3\x4c\x8a\x04\x94\x3d\x30\xb1\x04\x94\x47\x40\xa3\xc7\x54\x69\x8c\x40\x0b\xa0\x71\x2c\x9e\x80\x72\x10\xd6\xcd\x34\x86\x18\x69\xc4\xf8\x1c\xc8\x8a\x5c\x40\x42\x1f\x85\x0c\x04\x8f\xb3\x0b\x8b\x6a\xd7\x83\x84\xf1\x7c\xd7\xf3\x5a\x30\x05\x09\x52\xae\x40\x2f\x10\x66\xc2\x50\x35\x44\x9c\x2d\x15\x50\x89\x86\x15\xac\x68\xcc\xa2\xba\xbc\xca\x0b\x7c\x35\x18\x0d\xfe\x50\xfd\x1d\xcc\x84\x38\x9f\x52\x99\xef\xad\xaa\x00\xab\x26\x88\xab\xc1\xc8\xff\x2a\xc0\x2a\xf0\xc5\xcf\x1a\x5a\xd5\xd8\xab\xc9\x75\xff\xf2\xeb\xfd\x55\xf0\x7e\xf2\x10\xbd\x3b\xeb\x5f\x8f\x1f\x06\xd5\x8d\xb3\xeb\xe6\xad\xa0\xdf\xbf\x1e\x97\x9b\x5f\x1f\x22\xeb\xa3\x9b\xe0\x9f\xc1\xe4\xfe\x32\x78\xef\x7f\x7b\x92\x3b\x02\x9f\x79\x8e\xe7\xfd\xea\xc1\xb9\x25\x52\xdb\xb1\x90\xa7\xa4\x29\x8c\x9b\x42\xaf\x35\x83\xf2\xd4\xcc\x4c\x52\xa8\x31\x7c\x81\x53\x89\xb3\x31\x90\x93\x61\xa5\x6e\x0c\x9b\x42\x99\xc0\x37\x17\x8a\x4b\xa1\x98\x16\x32\xfb\x45\x70\x8d\xcf\x7a\x9f\x64\x35\x50\x6d\x25\xc2\x52\xe8\xa8\x0c\x22\x64\x77\xcd\xbc\x69\x1c\xdf\xce\x4a\x2e\x8d\x1a\x6d\x88\x5d\xd6\x8c\x75\x39\xad\xa4\x53\xaa\xf0\xef\x32\x26\xc5\xde\xa6\xc0\xe6\x5f\x0e\x56\xdd\x6a\x2c\x33\x4d\x2a\x36\xab\x49\xc3\x10\x95\xda\xb1\x62\x1b\xf6\x16\x0a\x66\x42\xe6\xa8\xa8\xa0\x6f\x56\xf8\xac\x91\x9b\x72\xab\xce\xb6\xf8\xa3\x07\x30\x67\x7a\x91\x4e\x6f\xba\x79\x77\x3a\xd4\x2e\x8d\x95\x2b\x56\xb3\x3b\xb3\x83\x1c\xee\xb7\x91\xa7\xc9\x18\xee\x89\x13\x90\x4c\xf2\x83\x9c\xd1\x16\x74\x13\x08\xdd\x10\xa1\x48\x12\xa6\xbb\xc2\x8e\x0b\x8e\xc7\xd8\xe5\x48\xbd\x7f\x17\x1c\xc9\xc4\x08\xa2\x44\x2a\x43\xfc\xb5\x88\xe9\x3d\xc4\x31\x3d\xb2\x58\xac\x5c\x13\x2e\xd6\x86\x42\xb1\x70\x21\xd4\x22\x38\x2f\x1a\x69\x87\xe0\xbb\xd7\x93\x1c\x05\x9f\xb5\xa4\xbf\xe5\x00\xe3\x3d\xe9\x78\x22\xab\xf5\xc9\xa2\xa5\x08\x54\xda\x12\x39\x30\x0c\x8b\x18\xb4\xa3\x8a\xda\x40\xa5\x52\xd2\xac\xc4\x64\x1a\x93\x5a\xc9\x68\x94\xcc\xd2\xf2\x48\xd5\x12\x60\xd7\x3c\xbb\x9d\x55\x49\xb4\xd4\x38\x87\x47\xb6\x03\x56\xb3\x7d\x07\x70\x33\xb6\x7a\xe0\x1e\x40\xc4\xe6\xa8\xf4\x87\x25\x86\x7b\x84\xe0\x82\xaa\xc5\x4d\x3c\x17\x92\xe9\x45\x52\x06\xa6\x90\x09\x8d\x99\xa2\x86\xd1\xe6\xb1\x1d\xe6\x5a\x82\xb1\x46\x70\xdd\x09\xce\x7d\x3e\x6c\x1b\x99\x74\xa2\x58\xc6\x2d\x10\x26\x15\xd9\x9c\x53\x9d\x4a\xdc\xd3\x08\xb4\x43\x43\xb3\x4a\x30\x62\xf4\xa3\xcf\xc7\x4d\x9d\xe9\xd1\xc2\xbb\xad\x82\x4f\x09\x55\xef\x2b\x1f\x17\xe8\x80\x5c\x73\x11\x33\x3b\xf5\x15\x6a\x43\x3e\x65\x6f\xb5\xcf\xa1\x35\xca\x85\x58\xb1\x2c\xe8\xed\x51\x98\x6a\x0a\x3b\x7a\x5b\xaa\x43\x19\xd7\x5e\xb3\x35\x3d\x5a\x31\x6b\xf1\x60\x73\x44\xc9\xf0\xce\x37\x9f\xad\x5d\x9c\x9a\x46\x85\x12\x79\x88\x76\x62\x87\x7e\x79\x97\x8c\x45\x48\xe3\xb3\xbc\xf8\xb7\x75\x14\x5f\x16\x3f\x60\x8c\xa1\x16\xf2\xd0\x2a\xfa\x0a\x15\xad\x7a\x11\xbb\xf3\x5a\x1e\x6a\x97\x82\xd2\xae\xb7\xc1\xda\x1d\xb0\x7a\x4b\xec\xbe\xad\x36\x5c\x1d\x5b\xf5\x6c\x64\xd1\xd5\x29\xe1\x04\x68\xa8\x53\x1a\xc7\xd9\xb8\xe4\x14\xd8\x44\x7b\x1a\x82\x5a\x62\xc8\x68\x0c\x12\x0d\x7c\x68\x99\xfc\xff\x36\xd7\x57\xeb\x91\xeb\x19\x2d\x38\x56\x7b\x64\xe0\x39\xf1\x34\xae\x0c\xf1\x2d\x0d\xae\x9a\xf9\xf6\x8a\xe3\xd2\xad\xac\x90\x7b\x0e\xe2\x9e\x80\xda\xf9\xd5\x22\x8f\x47\x38\xb1\xf8\x36\xe9\x4b\x2a\x17\xf9\xf5\x3b\x55\x1a\x12\xaa\xc3\x45\x25\x11\xd4\xc6\x3c\xb7\x39\x93\xc7\xb6\xf3\x55\xb6\xaa\x83\xc2\x8f\x31\xaf\xd0\xca\x15\xed\x17\x8a\x56\x47\xac\xbc\x89\x38\x27\xec\x3c\x68\xda\x10\x20\x17\x40\xcc\x35\x4e\x72\x1a\x7f\xf7\xb1\x73\xc7\xa1\xb3\x05\x4c\x84\xec\x4f\xb1\xd8\x98\x39\x5b\xa0\xad\xf6\x7f\x66\x31\xaa\x4c\x69\x4c\xf6\xc5\xbc\x6d\x62\xf6\x9a\x15\x43\x84\xec\xb7\x84\xce\x8f\xba\x28\xda\x25\x33\x54\x8a\x3e\xf9\x22\x37\x48\xfb\x6e\x32\x67\x4a\xcb\xac\x88\xa1\x3a\x9b\x2d\xaf\x2e\xa5\x29\x77\x54\xac\xa6\x56\x00\x24\xa6\x99\xcf\xc3\xe3\x74\x01\x92\x8b\x43\xa0\x7c\x08\x98\xb5\x0d\xb1\x37\x46\xf8\xfa\x08\x61\xa6\xd8\x84\x72\x36\x43\xa5\xd7\xc7\xd7\x35\xa6\x07\xce\xc8\xce\x2a\xae\x60\xbb\xd4\x70\x12\x28\xd0\x62\x0b\xc7\xf5\x00\xdd\x64\xe7\x20\x3c\x2b\x4d\xe5\x1c\x35\x46\x10\x0a\xae\x8b\xa1\xa8\x95\xbc\x62\x9f\x3b\x75\x31\xe7\xc0\x38\x4c\x33\x8d\xca\xf3\x98\x1a\x63\xaf\xd3\xe5\x69\x32\x35\x0e\xed\x01\xb4\x26\xea\x11\x39\x30\x63\x31\x96\xfd\xf1\xd8\x88\x69\x90\xb0\x8c\x1e\xcf\xaa\xcd\x2e\xfe\xbc\x6a\x0e\xd0\x0b\xaa\x81\x29\xab\xbb\x31\x3f\xe3\xf6\xec\x27\x73\xa8\x7e\x82\x88\x49\x3b\x84\x67\xad\xfe\xf0\x76\xbb\x3d\x20\xb7\xde\xc8\x60\xb7\xeb\x79\xd6\x1d\x9c\xf5\xc0\xb4\xf9\x0e\x4f\x4c\x2f\x72\xd3\x84\xa9\x94\xc8\x35\x34\x7d\x60\xea\xb2\x92\x2f\xab\x77\xf9\x24\x74\xcc\x77\xa1\xea\xc4\xdf\x64\xc4\x1f\x33\xd1\xf6\x3e\x62\x9d\xf1\xf6\x83\x48\xdb\x40\x51\x69\xb9\x6f\xd1\xe4\xcb\x67\xb0\x23\x72\x35\xf5\xaf\xe3\x47\x76\x75\x23\x4c\xe1\x89\xb4\xe3\x25\xbc\x07\x30\x47\x8e\x92\x85\xdf\xf1\x15\x3b\x97\xc0\x3d\x64\xe7\x8b\x1f\x49\xfd\x3f\x90\xd4\xa5\x63\xdc\xfe\xf7\xcd\xe9\x5a\xa0\xbe\x45\x4a\x17\x0d\x69\xe7\x17\xa9\xbd\x9f\xa0\x36\x63\x74\xe3\x53\xa4\xaa\x1c\x2e\xa5\x58\xb1\xa8\xf4\x66\x00\xa4\xf6\x96\x50\x7f\xd6\x2a\x46\x78\x55\xa3\x5f\xc3\xd8\x16\xf7\xbb\xbf\x6a\x1d\x11\x94\x9b\x3a\xef\x1d\x63\x1b\x5f\x41\xba\xee\x9a\x1b\x5f\x8a\x09\x9c\xf8\x31\x24\xce\x2e\xe0\x09\x41\xf0\x38\xcb\xff\x3a\xc2\x4e\xeb\x82\xfb\xf7\x67\xef\x83\x2d\x59\xf4\x6a\xb9\x92\xbb\xef\x85\xde\x21\xd6\x3e\x1b\x7a\xfc\x86\x18\x7a\x19\x86\x9b\x84\xcb\x20\x38\x54\xb3\xdd\x7d\x5f\x7d\xbb\x23\x3b\x06\x4b\x6d\xc6\xdc\x09\x69\xad\x85\xd9\x5a\xd2\x6c\x52\xf8\xf2\xad\xd7\xeb\xad\x15\x96\x6a\xd5\x08\x80\x24\xe8\xfe\xbc\xaa\x9a\xd9\xa4\x57\xcf\xdb\xf2\xcf\xb8\x1a\x05\xf2\x24\xd6\x0a\x5a\xb7\x83\x48\xf5\x53\x4d\x7d\x30\xa8\x38\xa4\xe6\x8c\xee\xcf\x1f\xa4\xf7\xdf\x00\x00\x00\xff\xff\x50\x3f\xfa\xf4\x2a\x27\x00\x00")

func LanguageIndependentComponentDescriptorV2SchemaYamlBytes() ([]byte, error) {
	return bindataRead(
		_LanguageIndependentComponentDescriptorV2SchemaYaml,
		"../../../../language-independent/component-descriptor-v2-schema.yaml",
	)
}

func LanguageIndependentComponentDescriptorV2SchemaYaml() (*asset, error) {
	bytes, err := LanguageIndependentComponentDescriptorV2SchemaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "../../../../language-independent/component-descriptor-v2-schema.yaml",
		size:        10026,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1681220532, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"../../../../language-independent/component-descriptor-v2-schema.yaml": LanguageIndependentComponentDescriptorV2SchemaYaml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"..": {Func: nil, Children: map[string]*bintree{
		"..": {Func: nil, Children: map[string]*bintree{
			"..": {Func: nil, Children: map[string]*bintree{
				"..": {Func: nil, Children: map[string]*bintree{
					"language-independent": {Func: nil, Children: map[string]*bintree{
						"component-descriptor-v2-schema.yaml": {Func: LanguageIndependentComponentDescriptorV2SchemaYaml, Children: map[string]*bintree{}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
