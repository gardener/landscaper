// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package jsonscheme generated by go-bindata.
// sources:
// ../../../../../../../resources/component-descriptor-v2-schema.yaml
package jsonscheme

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ResourcesComponentDescriptorV2SchemaYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1a\x5d\x6f\xdb\xba\xf5\x5d\xbf\xe2\xe0\xa6\x80\x9c\x26\x8a\x5b\x0f\x1d\x70\xfd\x12\x64\xbd\xd8\x50\x6c\xbb\x19\xda\x6e\x0f\x4b\xb3\x82\x96\x8e\x6d\x76\x14\xe9\x91\x94\x1b\xb5\xb7\xff\x7d\x20\x29\xea\x5b\xb2\x1d\x27\xed\x2d\xd0\xbc\x44\xa4\xce\x17\x0f\xcf\xb7\xfc\x84\x26\x73\x08\xd7\x5a\x6f\xd4\x7c\x3a\x5d\x11\x99\x20\x47\x79\x11\x33\x91\x25\x53\x15\xaf\x31\x25\x6a\x1a\x8b\x74\x23\x38\x72\x1d\x25\xa8\x62\x49\x37\x5a\xc8\x68\x3b\x0b\x83\x27\x0e\xa2\x46\xe1\x83\x12\x3c\x72\xbb\x17\x42\xae\xa6\x89\x24\x4b\x3d\x9d\x3d\x9b\x3d\x8b\x9e\xcf\x0a\x82\x61\xe0\xc9\x50\xc1\xe7\x10\xfe\xa5\xe0\x0a\x2f\x3d\x1f\xf8\xa5\xe4\x03\xdb\x19\x54\x68\x4b\xca\xa9\xc1\x52\xf3\x00\x20\x45\x4d\xcc\x7f\x00\x9d\x6f\x70\x0e\xa1\x58\x7c\xc0\x58\x87\x76\xab\xc9\xa2\x3c\x01\x54\x27\xb0\xf8\x09\xd1\xc4\x21\x48\xfc\x5f\x46\x25\x26\x8e\x22\x40\x04\xa1\xe3\xfb\x2f\x94\x8a\x0a\xee\xa0\x36\x52\x6c\x50\x6a\x8a\xca\xc3\x35\x80\xfc\x66\x29\x92\xd2\x92\xf2\x55\x18\x04\x00\x8c\x2c\x90\x0d\xca\xdb\xc3\x9e\x93\x14\xc3\x6a\xb9\x25\x2c\xc3\x21\x29\x0c\xec\x20\x73\xb7\x69\xf1\xe7\xf0\xf9\x8b\x5f\xb7\x45\xde\x10\xad\x51\x1a\x75\xfd\x67\x7b\xf3\x2c\xfa\xf9\xf6\xec\x89\xc7\x55\x74\xc5\x89\xce\x64\x97\xc7\x42\x08\x86\x84\xdb\x13\x96\x5a\xfe\xb5\x94\xa6\x47\x92\x94\xdc\xfd\x0d\xf9\x4a\xaf\xe7\x30\x7b\xf1\x22\x68\x71\xbe\x21\xd1\xa7\xdb\x9b\x88\x44\x9f\x8c\x04\x4f\x27\x37\x17\xb7\xad\xad\xd3\xa7\x7e\xef\xf3\xec\xfc\xcb\x64\xda\x78\xfd\xbe\x07\xe5\xbd\xc1\x39\x35\x87\x09\x00\x68\x82\x5c\x53\x9d\x5f\x69\x2d\xe9\x22\xd3\xf8\x57\xcc\x9d\xa8\x29\xe5\xa5\x5c\x7d\x52\x19\xe6\x93\x9b\xe8\xfd\x99\x17\xc4\x6f\x9e\x5e\x3a\xd2\x12\x19\xb9\xc3\xe4\x0d\xa6\x5b\x94\x8e\xe6\x09\x68\xf2\x5f\xe4\xb0\x94\x22\x05\x65\x5f\x18\xb7\x00\xc2\x13\x20\xc9\x87\x4c\x69\x4c\x40\x0b\x20\x8c\x89\x8f\x40\x38\x08\x6b\xb1\x84\x01\x43\x92\x50\xbe\x82\x70\x1b\x9e\x43\x4a\x3e\x08\x19\x09\xce\xf2\x73\x8b\x6a\xd7\x17\x29\xe5\xc5\xae\xe7\xb5\xa6\x0a\x52\x24\x5c\x81\x5e\x23\x2c\x85\xa1\x6a\x88\x38\xf5\x2b\x20\x12\x0d\x2b\x63\x0a\x34\x69\xca\xab\xbc\xc0\xcf\x2f\x66\x17\x7f\xa8\x3f\x47\x4b\x21\xce\x16\x44\x16\x7b\xdb\x3a\xc0\xb6\x0f\xe2\xf9\xc5\xcc\x3f\x95\x60\x35\xf8\xf2\xb1\x81\x56\x57\xf6\xf6\xf6\x72\xf2\xec\xb7\x9b\xe7\xd1\xcf\xb7\xef\x92\xa7\xa7\x93\xcb\xf9\xbb\x8b\xfa\xc6\xe9\x65\xff\x56\x34\x99\x5c\xce\xab\xcd\xdf\xde\x25\xf6\x8e\xae\xa2\x7f\x47\xb7\xc6\xa0\xfd\xb3\x27\xb9\x27\xf0\xa9\xe7\x78\x36\xa9\xbf\x38\xb3\x44\x1a\x3b\x16\xb2\x70\x9a\x6e\x00\xe8\x98\xde\x60\x30\x28\xfc\x3b\x37\x7e\xa4\xe6\xf0\x19\x9e\x48\x5c\xce\x21\x3c\x99\xd6\x42\xe0\xb4\xcf\x94\x43\xf8\xe2\x4c\x71\x23\x14\xd5\x42\xe6\x2f\x05\xd7\x78\xa7\x0f\x89\x3b\x06\x6a\x28\xce\x58\x0a\x23\x41\x4e\xc4\xf4\x75\x3f\x6f\xc2\xd8\xf5\xb2\xe2\xd2\x7b\xa2\x8e\xd8\x55\xf8\x6b\xcb\x59\xc8\xba\x20\x0a\xff\x29\x59\x58\x05\xb1\x8e\xc8\xe6\xaf\x00\xab\x6f\x0d\x44\x49\xf3\xd7\x88\x63\x7f\x27\x9b\x0d\xe5\xab\x3d\x51\x01\x90\x67\xe9\x1c\x6e\xc2\x4c\xb2\x7f\x10\xbd\x0e\xcf\x21\x54\x6b\x32\x7b\xf1\xc7\x28\xa1\x2b\x54\x3a\xbc\x0d\x5a\x74\x0e\xa5\x6c\x75\xbc\xa2\x4a\xcb\xdc\x50\xbf\x7e\xf9\xaa\x5c\xde\x9a\x3b\x20\x71\x8c\x4a\xed\x99\x19\x8d\x66\x2c\x14\x2c\x85\x2c\x50\x51\xc1\xc4\xac\xf0\x4e\x23\x37\x39\x42\x9d\xee\x30\x96\x00\x60\x45\xf5\x3a\x5b\x5c\x8d\xf3\x1e\xb5\x36\xbb\x34\x26\x50\xbb\x50\xbb\xb3\xbc\x97\x35\xb6\xd5\xe6\x04\x2c\xd5\x5f\x30\xda\x81\x6e\xac\x74\x1c\x22\x16\x69\x4a\xf5\x98\x4f\x70\xc1\xf1\x18\xbd\x1c\x79\xee\x5f\x05\x47\x67\x18\x4a\x64\x32\xc6\x5f\x4a\x87\x3b\x40\x1c\x53\x5f\x94\x8b\xa2\x72\x28\xd7\x86\x42\xb9\x70\x26\x74\xff\x32\x05\x0e\x08\x76\x05\x0a\xde\x69\x49\x5e\x15\x00\xf3\x03\xe9\x84\x43\xe5\xd0\x40\x84\xaa\xe5\xcc\x70\xff\xeb\xb0\xc5\x9f\xea\x00\x11\x29\x49\x5e\x9d\x9c\x6a\x4c\x1b\x71\xab\x57\x06\x4b\xcb\x23\xd5\x9d\xdd\xae\x79\x7e\xbd\x6c\x06\xc9\x5e\x22\x0e\x2f\xdc\x0d\x58\xf7\xeb\x3d\xc0\x4d\x23\xe0\x81\x03\x00\x17\xf3\xde\x6c\x30\x3e\xc0\xd8\xd6\x44\xad\xaf\xd8\x4a\x48\xaa\xd7\x69\x65\x82\x42\xa6\x84\x51\x45\x0c\xa3\xee\x6b\x5b\xde\x0e\x98\x5d\x83\x60\xfb\x12\xdc\x45\x79\x03\xed\x65\x32\x8a\xe2\xea\xea\x7e\x88\xa0\x56\x3a\x1f\xa8\x04\x32\x72\x42\xb3\x4a\x31\xa1\xe4\xad\xf7\xbc\xee\x99\xc9\xd1\xc2\xbb\xad\x92\x4f\x05\xd5\xcc\x20\x6f\xd7\xe8\x80\x5c\x1a\x11\x4b\x5b\x7c\x96\xc7\x86\x5a\xdf\x32\xaa\x9f\xfb\x46\x23\x67\x62\xe5\xb2\xa4\x77\x40\x08\x6a\x1c\xd8\xd1\xdb\x11\x07\x2a\xbb\x1e\x69\x91\x7a\x31\x1b\xf6\x60\x7d\x44\xc9\xf8\xb5\x4f\x33\x3b\xf3\x35\x31\x29\x09\x25\xf2\x18\x6d\xe3\x00\x93\xaa\x3b\x67\x22\x26\xec\xb4\x08\xf3\x43\xb9\xc3\x07\xc0\x37\xc8\x30\xd6\x42\xde\x37\x5e\x3e\x42\x44\xab\xb7\x90\xaf\xfd\x29\xef\xab\x97\x92\xd2\xbe\xfd\x75\xa3\xea\xab\xf7\xdd\xe3\xfd\x7f\x4f\xd3\x3b\x78\xce\x5e\x16\x63\x39\x11\x4e\x80\xc4\x3a\x23\x8c\xe5\xf3\x8a\x53\x64\x1d\xed\xe3\x14\xd4\x06\x63\x4a\x18\x48\x34\xf0\xb1\x65\xf2\xfd\xa6\xd1\x47\xcb\x91\x6d\x8f\x16\x1c\xdb\x39\xb2\xe0\xc5\x33\xc6\xf6\x48\x72\x75\xef\xb7\xdd\x96\x73\xb9\x2a\x4a\x1e\x58\x76\x7b\x02\x6a\xef\x59\x50\x61\x93\x70\x62\xf1\xad\xe3\x57\x54\xce\x8b\x49\x40\xa6\x34\xa4\x44\xc7\xeb\x9a\x33\xa8\x4e\xf5\xd6\xad\xc0\x99\xcd\x7e\xb5\xad\x7a\xb1\xf0\xa3\xa8\x2b\x4f\xe5\x02\xf7\x03\x59\xac\x23\x56\xf5\x1d\xee\x12\xf6\xae\xf2\xad\x09\x98\x76\xd0\x34\x6d\x92\x13\x56\x36\x3a\xdf\x6f\xe9\x29\x62\xfa\x27\x26\xf6\xaf\x3d\xad\x0e\xfe\x4c\x19\xaa\x5c\x69\x4c\x0f\xc7\xbd\xee\x63\xf8\xd8\xd1\x43\xc4\xf4\x55\x4a\x56\x47\xb5\x88\x76\x49\x0d\x95\x32\x6f\x3e\x48\xef\x58\x1f\x35\x78\x7b\x6a\xb2\xd9\x31\x0c\xaa\xd4\x79\xc4\xc1\x18\xc9\xbd\x5f\x1e\x77\x1e\x08\x0b\x91\x42\xa8\xc6\x00\xcb\xa1\xc2\xf6\xca\x1c\xa0\x59\x56\x98\xca\x36\x25\x9c\x2e\x51\xe9\x76\x49\xdb\x62\x7a\xcf\xba\xd9\x69\xc6\x05\x70\xe7\x28\x4e\x02\x05\x5a\xec\xe0\xd8\x36\xd4\x2e\x3b\x07\xe1\x59\x69\x22\x57\xa8\x31\x81\x58\x70\x5d\x16\x4a\x83\xe4\x15\xfd\x34\x7a\x16\xf3\x1e\x28\x87\x45\xae\x51\x79\x1e\x0b\xa3\xec\x36\x5d\x9e\xa5\x0b\x73\xa1\x01\xc0\xa0\xcb\x1e\x61\x2e\x4b\xca\xb0\xca\x97\xc7\x5a\x4c\x8f\x84\x95\xf5\x78\x56\x43\x7a\xf1\xef\xeb\xea\x00\xbd\x26\x1a\xa8\xb2\x67\x37\xea\xa7\xdc\xbe\xfb\xc9\xbc\x54\x3f\x41\x42\xa5\x2d\xcc\xf3\xc1\xfb\xf0\x7a\xbb\x7e\x20\xff\x7a\x04\x85\x5d\xb7\xfd\x6c\xdc\x38\x9b\x86\x69\xfd\x1d\x3e\x52\xbd\x2e\x54\x13\x67\x52\x22\xd7\xd0\xf7\x19\x6f\x4c\x4b\x3e\xb4\xbe\x2e\x2a\xa3\x63\xbe\xbe\xd5\xbb\x80\x3e\x25\xfe\xa8\x91\x76\xe7\x12\x7b\x19\x5f\xbf\x30\x19\x2a\x2e\x6a\x69\xf7\xeb\x24\xfb\x00\xa0\x9a\x8f\x1d\xe1\xb0\x99\x1f\x90\x1f\x99\xde\x8d\x30\xe5\x75\x64\x23\xc3\xf0\x00\x60\x85\x1c\x25\x8d\xbf\xe1\x20\xbb\x90\xc0\xcd\xb2\x8b\xc5\x0f\xcf\xfe\x1d\x78\x76\x75\x31\x6e\xff\xdb\x3a\x76\xc3\x50\xbf\x56\x11\x5f\x66\xa6\xbd\xc7\x55\x07\xcf\xa7\xba\x76\xda\xf9\x5c\xaa\x6a\x2f\x37\x52\x6c\x69\x52\xdd\x68\x04\x61\x63\xc8\xd0\x9c\x79\x95\xf5\xbc\x6a\xd0\x6f\x60\xec\xb2\xfd\xfd\x47\x5e\x47\x18\x66\x2c\xd1\x36\xc6\x6f\xe9\x8e\x31\x2e\xc0\x52\xc8\x94\xe8\x39\x24\x44\x63\xa4\x69\x39\x32\xee\xaa\xed\x60\x53\xed\xb4\xba\x63\x3d\x6c\xe7\x83\x78\x08\x27\xbe\xa4\x61\xf9\x39\x7c\x44\x10\x9c\xe5\xc5\x8f\x40\x6c\xe5\x2f\xb8\x17\xd6\x5f\xe3\xb7\xfa\xbe\x54\x58\xc0\x03\xcd\x38\x5a\x1f\x20\xcb\x4b\xed\x9a\xe1\xc3\x30\xec\x12\xae\x06\x2c\xf7\x3d\xd9\xfe\x77\x5f\x9f\x0b\x86\x7b\x1a\x4b\xa3\x5e\xdd\x0b\xa9\x95\x09\x6d\x38\xea\x57\x29\x7c\xfe\x12\x04\x41\x2b\x36\xd5\x03\x4f\x04\x61\x8a\xee\x07\x71\xf5\xe0\x10\x06\x4d\xd7\xaf\x7e\x78\xd7\x2b\x90\x27\xd1\x8a\x89\xe3\x17\x14\xd6\x3f\x05\x35\xeb\x8b\xda\x85\x34\x2e\x63\xfc\xf3\x4a\xf8\xff\x00\x00\x00\xff\xff\x19\x32\x06\xe9\xdb\x28\x00\x00")

func ResourcesComponentDescriptorV2SchemaYamlBytes() ([]byte, error) {
	return bindataRead(
		_ResourcesComponentDescriptorV2SchemaYaml,
		"../../../../../../../resources/component-descriptor-v2-schema.yaml",
	)
}

func ResourcesComponentDescriptorV2SchemaYaml() (*asset, error) {
	bytes, err := ResourcesComponentDescriptorV2SchemaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../../../../../resources/component-descriptor-v2-schema.yaml", size: 10459, mode: os.FileMode(436), modTime: time.Unix(1673541992, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../../../../../resources/component-descriptor-v2-schema.yaml": ResourcesComponentDescriptorV2SchemaYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"..": {nil, map[string]*bintree{
			"..": {nil, map[string]*bintree{
				"..": {nil, map[string]*bintree{
					"..": {nil, map[string]*bintree{
						"..": {nil, map[string]*bintree{
							"..": {nil, map[string]*bintree{
								"resources": {nil, map[string]*bintree{
									"component-descriptor-v2-schema.yaml": {ResourcesComponentDescriptorV2SchemaYaml, map[string]*bintree{}},
								}},
							}},
						}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
