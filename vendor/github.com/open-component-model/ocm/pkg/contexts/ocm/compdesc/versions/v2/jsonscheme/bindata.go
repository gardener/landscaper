// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package jsonscheme generated by go-bindata.// sources:
// ../../../../../../../resources/component-descriptor-v2-schema.yaml
package jsonscheme

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ResourcesComponentDescriptorV2SchemaYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdd\x6f\x1b\xb9\x11\x7f\xdf\xbf\x62\x70\x09\x40\x39\xf6\x5a\x89\x8a\x14\x38\xbd\x18\x6e\x0e\x05\x82\xf6\xce\x45\x92\xf6\xa1\x8e\x1b\x50\xbb\x23\x89\x29\x97\x54\x49\x4a\xb1\x92\xcb\xff\x5e\x90\x5c\xee\xf7\xae\xbe\xec\xdc\x1d\x90\xbc\xc4\xe4\x0e\x67\x86\xc3\xdf\x7c\x70\xa8\xa7\x2c\x9d\x02\x59\x1a\xb3\xd2\xd3\xf1\x78\x41\x55\x8a\x02\xd5\x65\xc2\xe5\x3a\x1d\xeb\x64\x89\x19\xd5\xe3\x44\x66\x2b\x29\x50\x98\x38\x45\x9d\x28\xb6\x32\x52\xc5\x9b\x09\x89\x9e\x7a\x8a\x0a\x87\x8f\x5a\x8a\xd8\xcf\x5e\x4a\xb5\x18\xa7\x8a\xce\xcd\x78\xf2\x7c\xf2\x3c\x7e\x31\xc9\x19\x92\x28\xb0\x61\x52\x4c\x81\xdc\xac\x50\xc0\xab\x20\x03\x7e\x96\x29\x72\xd8\x4c\xa0\xa4\x9e\x33\xc1\x2c\xb1\x9e\x46\x00\x19\x1a\x6a\xff\x07\x30\xdb\x15\x4e\x81\xc8\xd9\x47\x4c\x0c\x71\x53\x75\xce\x85\xe2\x50\x2a\xee\xd6\xa7\xd4\x50\xbf\x40\xe1\xff\xd6\x4c\x61\xea\x39\x02\xc4\x40\xbc\xdc\x7f\xa1\xd2\x4c\x0a\x4f\xb5\x52\x72\x85\xca\x30\xd4\x81\xae\x46\x14\x26\x0b\x95\xb4\x51\x4c\x2c\x48\x14\x01\x70\x3a\x43\xde\xab\x6f\x87\x78\x41\x33\x24\xe5\x70\x43\xf9\x1a\xfb\xb4\xb0\xb4\xbd\xc2\xfd\xa4\x5b\x3f\x85\x2f\x5f\xc3\xb8\xa9\xf2\x8a\x1a\x83\xca\x9a\xeb\x3f\x9b\xdb\xe7\xf1\x8f\x77\xe7\x4f\xc3\x5a\xcd\x16\x82\x89\x45\x4b\xc2\x4c\x4a\x8e\x54\xb8\xfd\x15\x36\xfe\xa5\xd0\xa5\x43\x8f\x8c\xde\xff\x1d\xc5\xc2\x2c\xa7\x30\x79\xf9\x32\x6a\xc8\xbd\xa5\xf1\xe7\xbb\xdb\x98\xc6\x9f\xad\xfc\x67\xa3\xdb\xcb\xbb\xc6\xd4\xd9\xb3\x30\xf7\x65\x72\xf1\x75\x34\xae\x7d\xfe\xd0\xb1\xe4\x83\x5d\x73\x66\xb7\x12\x01\xb0\x14\x85\x61\x66\x7b\x6d\x8c\x62\xb3\xb5\xc1\xbf\xe1\xd6\xab\x9a\x31\x51\xe8\xd5\xa5\x95\x15\x3e\xba\x8d\x3f\x9c\x07\x45\xc2\xe4\xd9\x95\x67\xad\x90\xd3\x7b\x4c\xdf\x62\xb6\x41\xe5\x79\x3e\x01\x43\xff\x8b\x02\xe6\x4a\x66\xa0\xdd\x07\xeb\x0b\x40\x45\x0a\x34\xfd\xb8\xd6\x06\x53\x30\x12\x28\xe7\xf2\x13\x50\x01\xd2\xe1\x95\x72\xe0\x48\x53\x26\x16\x40\x36\xe4\x02\x32\xfa\x51\xaa\x58\x0a\xbe\xbd\x70\x4b\xdd\xf8\x32\x63\x22\x9f\x0d\xb2\x96\x4c\x43\x86\x54\x68\x30\x4b\x84\xb9\xb4\x5c\x2d\x13\x6f\x7e\x0d\x54\xa1\x15\x65\x81\xc0\xd2\xba\xbe\x3a\x28\xfc\xe2\x72\x72\xf9\xa7\xea\xdf\xf1\x5c\xca\xf3\x19\x55\xf9\xdc\xa6\x4a\xb0\xe9\xa2\x78\x71\x39\x09\x7f\x15\x64\x15\xfa\xe2\xcf\xda\xb2\xaa\xb1\x37\x77\x57\xa3\xe7\xbf\xde\xbe\x88\x7f\xbc\x7b\x9f\x3e\x3b\x1b\x5d\x4d\xdf\x5f\x56\x27\xce\xae\xba\xa7\xe2\xd1\xe8\x6a\x5a\x4e\xfe\xfa\x3e\x75\x67\x74\x1d\xff\x3b\xbe\xb3\x70\x0e\x7f\x07\x96\x7b\x12\x9f\x05\x89\xe7\xa3\xea\x87\x73\xc7\xa4\x36\xe3\x28\x73\x97\x69\xbb\x7f\x0b\x7a\xbd\xa1\x20\xf7\xee\xad\xf5\x23\x3d\x85\x2f\xf0\x54\xe1\x7c\x0a\xe4\xc9\xb8\x12\x00\xc7\x5d\x50\x26\xf0\xd5\x43\x71\x25\x35\x33\x52\x6d\x5f\x49\x61\xf0\xde\x1c\x12\x75\x2c\x55\x5f\x94\x71\x1c\x06\x42\x9c\x4c\xd8\x9b\x6e\xd9\x94\xf3\x9b\x79\x29\xa5\x73\x47\x2d\xb5\xcb\xe0\xd7\xd4\x33\xd7\x75\x46\x35\xfe\x53\x71\x52\x86\xb0\x96\xca\xf6\x5f\x4e\x56\x9d\xea\x89\x91\xf6\x5f\x2d\x8e\xfd\x4c\x57\xab\x5a\xe0\x1b\x5c\x0a\x80\x62\x9d\x4d\xe1\x96\xac\x15\xff\x07\x35\x4b\x72\x01\x44\x2f\xe9\xe4\xe5\x9f\xe3\x94\x2d\x50\x1b\x72\x17\x35\xf8\x1c\xca\xd9\xd9\x78\xc1\xb4\x51\x5b\xcb\xfd\xe6\xd5\xeb\x62\x78\x67\xcf\x80\x26\x09\x6a\xbd\x67\x5e\xb4\x96\x71\x54\x30\x97\x2a\x5f\x8a\x1a\x46\x76\x84\xf7\x06\x85\xcd\x10\xfa\x6c\x07\x58\x22\x80\x05\x33\xcb\xf5\xec\x7a\x58\xf6\x20\xda\xdc\xd0\x42\xa0\x72\xa0\x6e\x66\x7e\x14\x1a\x9b\x66\xf3\x0a\x16\xe6\xcf\x05\xed\x58\x6e\x51\x3a\x4c\x91\xc8\x2c\x63\x66\xc8\x27\x84\x14\x78\x8a\x5d\x4e\xdc\xf7\x2f\x52\xa0\x07\x86\x96\x6b\x95\xe0\x4f\x85\xc3\x1d\xa0\x8e\xad\x2e\x8a\x41\x5e\x37\x14\x63\xcb\xa1\x18\x78\x08\x1d\x5f\xa4\xc0\x01\xc1\x2e\x5f\x82\xf7\x46\xd1\xd7\x39\xc1\xf4\x40\x3e\xa4\xaf\x18\xea\x89\x50\x95\x9c\x49\xf6\x3f\x0e\x57\xfa\xe9\x16\x11\x55\x8a\x6e\xcb\x9d\x33\x83\x59\x2d\x6e\x75\xea\xe0\x78\x85\x45\x55\x67\x77\x63\xb1\xbd\x99\xd7\x83\x64\x27\x13\xbf\x8e\xec\x26\xac\xfa\xf5\x1e\xe4\xb6\xfa\x0f\xc4\x11\x80\x8f\x79\x6f\x57\x98\x1c\x00\xb6\x25\xd5\xcb\x6b\xbe\x90\x8a\x99\x65\x56\x42\x50\xaa\x8c\x72\xa6\xa9\x15\xd4\xfe\xec\x8a\xdb\x1e\xd8\xd5\x18\x36\x0f\xc1\x1f\x54\x00\x68\xa7\x90\xc1\x25\xbe\xaa\xee\xa6\x88\x7c\xe1\x4c\xcd\x5a\xe1\x81\x46\xa0\x03\x3b\xb4\xa3\x0c\x53\x46\xdf\x05\xcf\x6b\xef\x99\x9e\xac\xbc\x9f\x2a\xe4\x94\x54\xf5\x0c\xf2\x6e\x89\x9e\xc8\xa7\x11\x39\x77\xc5\x67\xb1\x6d\xa8\xdc\x5a\x06\xed\x73\x6c\x34\x2a\x18\x1c\x10\x73\x6a\x3b\xf4\x18\xdd\xe1\xf8\x25\x90\xab\x37\xa2\x8a\xe2\xbd\x2b\x6b\x00\xf0\x09\x01\x6d\xdd\xff\xd3\x31\xae\x51\xec\xfc\x88\x7d\xb6\x22\x5c\x07\xcd\x83\x84\xd2\x83\x0d\x5a\xd8\xa4\xb8\xfa\x7b\xe3\x1c\x92\x30\x7b\x33\xd4\x2e\x4b\x75\x6a\x57\x2b\x01\x1f\x20\x45\x1c\x89\x31\x85\x79\xce\xae\x9a\x03\x4e\xcc\x1f\x4d\xf8\x39\xfb\x6b\x95\xbc\x09\xb5\xce\xce\xa2\x91\xda\xba\x08\x15\x8a\x04\xdd\xed\x15\x46\x65\x5f\x88\xcb\x84\xf2\xb3\xbc\xd6\xe8\x2b\x60\x02\x74\xde\x22\xc7\xc4\x48\x75\x2c\xd2\x1e\x21\xad\x56\xfb\x18\x6f\xc2\x2e\x8f\xb5\x4b\xc1\x69\xdf\x16\x4f\x27\xee\x62\x20\x9b\xe1\x16\x54\x47\xe7\xe5\x30\x68\x0f\x15\x66\xf0\x04\x68\x62\xd6\x94\xf3\xed\xb4\x94\x14\xbb\x68\xff\x69\x0c\x7a\x85\x09\xa3\xdc\x62\xd5\x28\x96\x38\x21\x7f\xdc\x5a\xee\xd1\x0a\xb5\x66\x04\x90\x02\x9b\x85\x5a\x2e\x4b\xac\x39\xdf\xa3\xd2\x6a\x04\xd0\x10\x2a\xca\x54\x7d\xe0\xdd\x2f\x30\xd0\x7b\xb7\x23\x73\x4c\xc2\x13\xb7\xde\x39\x7e\xc9\xe5\x22\x6f\x47\xad\xb5\x81\x8c\x9a\x64\x59\x71\x06\xdd\xba\x42\xb4\xaf\x81\xdc\x95\x60\x95\xa9\x6a\xc5\xfa\xfd\x66\x51\xec\xca\x07\xee\x07\x42\xac\x67\x56\x66\x1f\x7f\x08\x7b\x5f\x35\x1d\x04\xc8\x05\x10\xbc\x37\xa8\x04\xe5\xc5\x6d\xfb\x8f\x7b\xff\x91\x09\xfb\x0b\x97\xfb\x5f\x80\x9c\x0d\xfe\xca\x38\xea\xad\x36\x98\x1d\xbe\xf6\xa6\x4b\xe0\x63\x47\x0f\x99\xb0\xd7\x19\x5d\x9c\xd4\xa7\x70\x43\x66\xb9\x14\x79\xf3\x41\x1a\x18\xd5\x7e\x57\xc0\x53\x5d\xcc\x8e\x8e\x64\x69\xce\x13\x36\xc6\xe9\x36\xf8\xe5\x69\xfb\x01\x92\xab\x44\xa0\xec\x45\xcd\xfb\x6e\x57\xd7\x76\x03\xf5\xb2\xc2\x5e\xaf\x32\x2a\xd8\x1c\xb5\x69\xde\xab\x1a\x42\x8f\xbc\xbc\x79\xcb\xf8\x00\xee\x1d\xc5\x6b\xa0\xc1\xc8\x1d\x12\x9b\x40\x6d\x8b\xf3\x14\x41\x94\xa1\x6a\x81\x06\x53\x48\xa4\x30\x45\xa1\xd4\xcb\x5e\xb3\xcf\x83\x7b\xb1\xdf\x81\x09\x98\x6d\x0d\xea\x20\x63\x66\x8d\xdd\xe4\x2b\xd6\xd9\xcc\x1e\x68\x04\xd0\xeb\xb2\x27\xc0\x65\xce\x38\x96\xf9\xf2\x54\xc4\x74\x68\x58\xa2\x27\x88\xea\xb3\x4b\xf8\x5e\x35\x07\x98\x25\x35\xc0\xb4\xdb\xbb\x35\x3f\x13\xee\xdb\x0f\xf6\xa3\xfe\x01\x52\xa6\x5c\x61\xbe\xed\x3d\x8f\x60\xb7\x9b\x07\xf2\xaf\x47\x30\xd8\x4d\xd3\xcf\x86\xc1\x59\x07\xa6\xf3\x77\xf8\xc4\xcc\x32\x37\x4d\xb2\x56\x0a\x85\x81\xae\x97\xe4\x21\x2b\x85\xd0\xfa\x26\xaf\x8c\x0e\xb1\x51\x4f\xc5\xd5\x6b\xc4\xef\x35\xd2\xee\x5c\xe2\x0e\xe3\xdb\x17\x26\x7d\xc5\x45\x25\xed\x7e\x9b\x64\x1f\x01\x94\x4d\xda\x13\x1c\x76\x1d\x5e\x69\x4e\x4c\xef\x56\x99\xe2\x38\xd6\x03\x2f\x32\x11\xc0\x02\x05\x2a\x96\xfc\x86\xaf\x29\xb9\x06\xfe\x41\x25\x1f\x7c\xf7\xec\xdf\x81\x67\x97\x07\xe3\xe7\x7f\x5b\xc7\xae\x01\xf5\x5b\x15\xf1\x45\x66\xda\xbb\x5d\x75\x70\x7f\xaa\x8d\xd3\xd6\x9b\xbd\xae\x7c\x5c\x29\xb9\x61\x69\x79\xa2\x31\x90\x5a\x93\xa1\xde\xf3\x2a\xea\x79\x5d\xe3\x5f\x5b\xf1\xbb\xe8\xe6\x26\x0a\xdd\xc5\xf8\x1d\x6b\xbb\xdd\x6d\x40\xe8\x45\x7e\x8c\xe5\x7b\xff\x5c\xaa\x8c\x9a\x29\xa4\xd4\x60\x6c\x58\xd1\xaf\x6e\x9b\xf0\x60\xd8\xb6\xae\xbd\x43\xf7\xd9\xd6\x2f\x34\x08\x3c\x09\xe5\x0d\xdf\x5e\xc0\x27\x04\x29\xf8\x36\xff\x55\x92\xbb\x05\x48\x11\x94\x0d\x47\xba\xc3\x31\x1f\xcd\xfd\x72\x34\x3c\x50\xbf\xa3\xf1\x22\x5e\x1c\x70\x1b\x92\x0f\x23\xb0\xcd\xb8\xd9\xea\x7f\xcc\xb3\xaf\xf6\x08\xc9\x9e\x60\xa9\xd5\xae\x7b\x2d\x6a\x64\x45\x17\x9a\xba\x4d\x0a\x5f\xbe\x46\x51\xd4\x88\x53\xd5\x20\x14\x03\xc9\xd0\xff\x3e\xb3\x1a\x28\x48\x54\x0f\x03\xe5\xef\x40\x3b\x15\x0a\x2c\x1a\xf1\x71\xf8\x80\x48\xf5\x6d\xb2\x5e\x6b\x54\x0e\xa4\x76\x18\xc3\xcf\x7f\xa4\xf1\xf2\x77\x02\xcf\xee\xc7\x32\xf2\xff\x00\x00\x00\xff\xff\x2d\xbd\x2e\x43\xc2\x2b\x00\x00")

func ResourcesComponentDescriptorV2SchemaYamlBytes() ([]byte, error) {
	return bindataRead(
		_ResourcesComponentDescriptorV2SchemaYaml,
		"../../../../../../../resources/component-descriptor-v2-schema.yaml",
	)
}

func ResourcesComponentDescriptorV2SchemaYaml() (*asset, error) {
	bytes, err := ResourcesComponentDescriptorV2SchemaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../../../../../resources/component-descriptor-v2-schema.yaml", size: 11202, mode: os.FileMode(420), modTime: time.Unix(1683116144, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../../../../../resources/component-descriptor-v2-schema.yaml": ResourcesComponentDescriptorV2SchemaYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"..": {nil, map[string]*bintree{
			"..": {nil, map[string]*bintree{
				"..": {nil, map[string]*bintree{
					"..": {nil, map[string]*bintree{
						"..": {nil, map[string]*bintree{
							"..": {nil, map[string]*bintree{
								"resources": {nil, map[string]*bintree{
									"component-descriptor-v2-schema.yaml": {ResourcesComponentDescriptorV2SchemaYaml, map[string]*bintree{}},
								}},
							}},
						}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
