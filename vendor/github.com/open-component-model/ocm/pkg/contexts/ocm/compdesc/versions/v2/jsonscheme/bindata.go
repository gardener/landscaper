// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package jsonscheme generated by go-bindata.// sources:
// ../../../../../../../resources/component-descriptor-v2-schema.yaml
package jsonscheme

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ResourcesComponentDescriptorV2SchemaYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x6f\x1b\xb9\x11\x7f\xd7\xa7\x18\x9c\x03\x50\x8e\xbd\x96\xa3\x22\x05\xa2\x17\xc3\xcd\xa1\x40\xd0\xde\xf9\x90\xa4\x7d\xa8\xe3\x06\xd4\xee\x48\x62\xba\x4b\xaa\x24\xa5\x58\x97\xf3\x77\x3f\x90\x5c\xee\x72\xff\xea\x9f\x9d\xbb\x00\xf1\x43\x22\x72\x87\x33\xc3\x99\xdf\x0c\x87\xb3\xfb\x8c\x25\x13\x20\x0b\xad\x97\x6a\x32\x1a\xcd\xa9\x4c\x90\xa3\xbc\x88\x53\xb1\x4a\x46\x2a\x5e\x60\x46\xd5\x28\x16\xd9\x52\x70\xe4\x3a\x4a\x50\xc5\x92\x2d\xb5\x90\xd1\x7a\x4c\x06\xcf\x1c\x45\xc0\xe1\x93\x12\x3c\x72\xb3\x17\x42\xce\x47\x89\xa4\x33\x3d\x1a\x5f\x8e\x2f\xa3\x17\xe3\x9c\x21\x19\x78\x36\x4c\xf0\x09\x90\x9b\x25\x72\x78\xed\x65\xc0\x4f\x22\xc1\x14\xd6\x63\x28\xa9\x67\x8c\x33\x43\xac\x26\x03\x80\x0c\x35\x35\xff\x03\xe8\xcd\x12\x27\x40\xc4\xf4\x13\xc6\x9a\xd8\xa9\x2a\xe7\x42\x71\x28\x15\xb7\xeb\x13\xaa\xa9\x5b\x20\xf1\xff\x2b\x26\x31\x71\x1c\x01\x22\x20\x4e\xee\xbf\x51\x2a\x26\xb8\xa3\x5a\x4a\xb1\x44\xa9\x19\x2a\x4f\x57\x21\xf2\x93\x85\x4a\x4a\x4b\xc6\xe7\x64\x60\xd5\x95\x73\xec\xd4\xb7\xc9\x98\xa6\x73\x21\x99\x5e\x64\x25\xd3\x25\xd5\x1a\xa5\xd9\xd0\x7f\x6f\x69\xf4\xeb\x9d\xf9\xe7\x32\x7a\x35\xfa\x18\xdd\x9d\x3d\x23\x39\x59\x2c\xf8\x8c\xcd\x27\xf0\x05\x1e\xec\x0c\x4d\x12\x6b\x33\x9a\xfe\x52\xca\x80\x19\x4d\x15\x0e\x00\x52\x3a\xc5\xb4\x53\xab\x16\xa3\x70\x9a\x21\x29\x87\x6b\x9a\xae\xb0\x6b\x0b\x86\xb6\xd3\x24\x6e\xd2\xae\x9f\xc0\x97\x07\x3f\xae\x1b\x32\xd8\xf3\xfa\xf6\x32\x7a\x15\xec\x54\xb1\x39\x67\x7c\xde\x90\x30\x15\x22\x45\xca\x3d\x59\x60\x78\xf3\xf7\x4c\xe2\x6c\x02\xe4\x64\x14\xc0\x69\x64\x69\xac\x9b\x0a\xa8\xfc\x5c\x28\xdf\xa2\x78\x46\xef\xff\x89\x7c\xae\x17\x13\x18\xbf\x7c\x39\x68\x75\x4e\xe4\xbc\x73\xf7\x7c\x78\x7b\x71\x57\x9b\x3a\x7d\xee\xe7\xbe\x8c\xcf\x1f\x86\xa3\xca\xe3\x8f\x2d\x4b\x3e\x9a\x35\xa7\x66\xef\x03\x00\x96\x20\xd7\x4c\x6f\xae\xb5\x96\x6c\xba\xd2\xf8\x0f\xdc\x38\x55\x33\xc6\x0b\xbd\xda\xb4\x32\xc2\x87\xb7\xd1\xc7\x33\xaf\x88\x9f\x3c\xbd\x72\xac\x25\xa6\xf4\x1e\x93\x77\x98\xad\x51\x3a\x9e\x27\xa0\xe9\xff\x90\xc3\x4c\x8a\x0c\x94\x7d\x60\x42\x1a\x28\x4f\x80\x26\x9f\x56\x4a\x63\x02\x5a\x00\x4d\x53\xf1\x19\x28\x07\xb1\x74\x78\x83\x14\x69\xc2\xf8\x1c\xc8\x9a\x9c\x43\x46\x3f\x09\x19\x09\x9e\x6e\xce\xed\x52\x3b\xbe\xc8\x18\xcf\x67\xbd\xac\x05\x53\x90\x21\xe5\x0a\xf4\x02\x61\x26\x0c\x57\xc3\xc4\x99\x5f\x01\x95\x68\x44\x19\xe4\xb0\xa4\xaa\xaf\xf2\x0a\xbf\xb8\x18\x5f\xfc\x25\xfc\x1d\xcd\x84\x38\x9b\x52\x99\xcf\xad\x43\x82\x75\x1b\xc5\x8b\x8b\xb1\xff\x55\x90\x05\xf4\xc5\xcf\xca\xb2\xd0\xd8\xeb\xbb\xab\xe1\xe5\x6f\xb7\x2f\xa2\x57\x77\x1f\x92\xe7\xa7\xc3\xab\xc9\x87\x8b\x70\xe2\xf4\xaa\x7d\x2a\x1a\x0e\xaf\x26\xe5\xe4\x6f\x1f\x12\xeb\xa3\xeb\xe8\x3f\xd1\x9d\xc1\xbf\xff\xed\x59\xee\x48\x7c\xea\x25\x9e\x0d\xc3\x07\x67\x96\x49\x65\xc6\x52\xe6\x31\xd6\xcc\x62\x0d\xe8\x6d\xcb\x68\x1b\x13\x47\xca\xa4\xa3\xd6\xc0\x6b\x83\x32\x81\x07\x07\xc5\xa5\x50\x4c\x0b\xb9\x79\x2d\xb8\xc6\x7b\xbd\x4f\x9a\x32\x54\x5d\x69\xc9\x72\xe8\xc9\xd4\x22\x66\x6f\xdb\x65\xd3\x34\xbd\x99\x95\x52\x5a\x77\xd4\x50\xbb\xcc\x96\x75\x3d\x73\x5d\xa7\x54\xe1\xbf\x64\x4a\xca\x9c\xd7\x50\xd9\xfc\xe5\x64\xe1\x54\x47\x52\x75\xc7\x40\x90\xc7\x7e\xa2\xcb\x65\x25\x53\xf6\x2e\x05\x40\xbe\xca\x26\x70\x4b\x56\x32\xfd\x85\xea\x05\x39\x07\xa2\x16\x74\xfc\xf2\xaf\x51\xc2\xe6\xa8\x34\xb9\x1b\xd4\xf8\xec\xcb\xd9\xda\x78\xce\x94\x96\x1b\xc3\xfd\xe6\xf5\x9b\x62\x78\x67\x7c\x40\xe3\x18\x95\xda\xf1\x78\x37\x96\xb1\x54\x30\x13\x32\x5f\x8a\x0a\x86\x66\x84\xf7\x1a\xb9\x39\x52\xd4\xe9\x16\xb0\x0c\x00\xe6\x4c\x2f\x56\xd3\xeb\x7e\xd9\xbd\x68\xb3\x43\x03\x81\xc0\xa1\x76\x66\x76\x10\x1a\xeb\x66\x73\x0a\x16\xe6\xcf\x05\x6d\x59\x6e\x50\xda\x4f\x11\x8b\x2c\x63\xba\x2f\x26\xb8\xe0\x78\x8c\x5d\x8e\xdc\xf7\xcf\x82\xa3\x03\x86\x12\x2b\x19\xe3\x8f\x45\xc0\xed\xa1\x8e\x29\x47\x8a\x41\x5e\x68\x14\x63\xc3\xa1\x18\x38\x08\x1d\x5e\xd5\x74\x54\x19\xad\xc9\x2e\x5f\x82\xf7\x5a\xd2\x37\x39\xc1\x96\x6a\xa5\xc1\x87\x74\x55\x4f\x1d\x19\x2a\x38\x33\xc9\xee\xee\xb0\xb5\xa2\x6a\x10\x51\x29\xe9\xa6\xdc\x39\xd3\x98\x55\xf2\x56\xab\x0e\x96\x97\x5f\x14\x06\xbb\x1d\xf3\xcd\xcd\xac\x9a\x24\x5b\x99\xb8\x75\x64\x3b\x61\x18\xd7\x3b\x90\x9b\x4b\x8c\x27\x1e\x00\xb8\x9c\xf7\x6e\x89\xf1\x1e\x60\x5b\x50\xb5\xb8\xf6\x25\x7c\x09\x41\x21\x33\x9a\x32\x45\x8d\xa0\xe6\x63\x5b\x0d\x77\xc0\xae\xc2\xb0\xee\x04\xe7\x28\x0f\xd0\x56\x21\xbd\x4b\x5c\x19\xde\x4e\x31\x00\xd0\x2c\x43\xa5\x69\xb6\xac\x1b\xc1\xd9\xa0\x43\xe3\x3e\xa6\xf9\x14\x6b\x86\x52\x85\x00\x4c\x46\xcf\xa8\x9e\x40\x42\x35\x46\x86\xde\x26\x01\x36\xe7\x54\xaf\x24\xee\xe9\x14\xda\x63\x71\x33\xca\x30\x61\xf4\xbd\xcf\x04\x3b\xdd\xc9\xf6\x34\xa6\x9b\x2a\xe4\x94\x54\xd5\x13\xed\xfd\x02\x1d\x91\x3b\xd6\xc4\xcc\x16\xc3\xc5\xb6\x21\xb8\x76\xb5\xf9\xab\x20\x3c\x34\x3b\x3a\xc8\x17\xc3\x82\x9f\xab\x82\x7a\x6f\x94\xbb\xa6\xcc\x8a\x41\x9c\xbc\x2d\x79\xab\x8c\xc3\xf0\x06\x18\xec\xb3\x73\x65\x05\x2f\x24\x00\x9f\x05\xf5\x96\xc5\x15\xf0\xbb\xc3\x10\xcd\x9d\xe7\xc7\x43\xd2\x42\x61\xe5\x03\x8c\xd4\xc8\xee\x2d\x34\x8f\x72\x8c\xec\xed\x8d\xc2\x26\x45\xf7\xc6\x19\x67\x9f\x62\xa1\xf3\x74\xde\x66\xa9\x56\xed\x2a\xe5\xef\x23\x1c\x8f\x07\x02\x54\x62\x5e\xaf\x84\xe6\x80\x23\xcf\xce\x3a\xfc\xac\xfd\x95\x8c\xdf\xfa\x3a\x6f\x6b\xc1\x4c\x4d\x4d\x88\x12\x79\x8c\xf6\xe6\x0e\xc3\xb2\xb5\x97\x8a\x98\xa6\xa7\x79\x9d\xd5\x55\xbc\x79\xe8\xbc\xc3\x14\x63\x2d\xe4\xa1\x48\x7b\x82\x92\x22\xec\xe1\xbc\xf5\xbb\x3c\xd4\x2e\x05\xa7\x5d\xfb\x61\xad\xb8\x8b\x80\xac\xfb\xbb\x88\x2d\x5d\xa7\xfd\xa0\xdd\x57\x94\xc2\x09\xd0\x58\xaf\x68\x9a\x6e\x26\xa5\xa4\xc8\x9e\x2c\x9f\x47\xa0\x96\x18\x33\x9a\x1a\xac\x6a\xc9\x62\x2b\xe4\xdb\xad\x63\x9f\xac\x48\xad\x67\x00\xc1\xb1\x5e\xa4\xe6\xb2\xf8\x2a\x4d\x77\xa8\x32\x6b\x09\xd4\xa7\x8a\xb2\x2c\xd8\xf3\xde\xeb\x19\xa8\x9d\x7b\xb7\x39\x26\xe1\xc4\xae\xb7\x81\x5f\x72\x39\xcf\x5b\x71\x2b\xa5\x21\xa3\x3a\x5e\x04\xc1\xa0\x1a\xd7\xa7\xe6\x15\x38\xb5\xe5\x67\x30\x15\x56\xeb\xdf\x6f\x55\xc5\xae\x5c\xe2\x7e\x24\xc4\x3a\x66\xe5\xe9\xe3\x9c\xb0\xf3\x35\xdb\x42\x80\x9c\x03\xc1\x7b\x8d\x92\xd3\xb4\xe8\x34\x7c\xbb\x77\x3f\x11\xb3\xbf\xa5\x62\xf7\xcb\x9f\xb5\xc1\xdf\x59\x8a\x6a\xa3\x34\x66\xfb\xaf\xbd\x69\x13\xf8\xd4\xd9\x43\xc4\xec\x4d\x46\xe7\x47\xf5\x68\xec\x90\x19\x2e\xc5\xb9\xf9\x28\xcd\x9b\xb0\xd7\xe7\xf1\x54\x15\xb3\xa5\x1b\x5b\x9a\xf3\x88\x8d\xa5\x74\xe3\xe3\xf2\xb8\xfd\x00\xc9\x55\x22\x50\xf6\xe1\x66\x5d\x37\xb9\x6b\xb3\x81\x6a\x59\x61\xae\x72\x19\xe5\x6c\x86\x4a\xd7\xef\x70\x35\xa1\x07\x5e\x14\x9d\x65\x5c\x02\x77\x81\xe2\x34\x50\xa0\xc5\x16\x89\x75\xa0\x36\xc5\x39\x0a\x2f\x4a\x53\x39\x47\x8d\x09\xc4\x82\xeb\xa2\x50\xea\x64\xaf\xd8\xaf\xbd\x7b\x31\xcf\x81\x71\x98\x6e\x34\x2a\x2f\x63\x6a\x8c\x5d\xe7\xcb\x57\xd9\xd4\x38\x74\x00\xd0\x19\xb2\x47\xc0\x65\xc6\x52\x2c\xcf\xcb\x63\x11\xd3\xa2\x61\x89\x1e\x2f\xaa\xcb\x2e\xfe\x79\x68\x0e\xd0\x0b\xaa\x81\x29\xbb\x77\x63\x7e\xc6\xed\xb3\x1f\xcc\x43\xf5\x03\x24\x4c\xda\xc2\x7c\xd3\xe9\x0f\x6f\xb7\x9b\x47\x8a\xaf\x27\x30\xd8\x4d\x3d\xce\xfa\xc1\x59\x05\xa6\x8d\x77\xf8\xcc\xf4\x22\x37\x4d\xbc\x92\x12\xb9\x86\xb6\x8f\x01\xfa\xac\xe4\x53\xeb\xdb\xbc\x32\xda\xc7\x46\x1d\x15\x57\xa7\x11\xbf\xd7\x48\xdb\xcf\x12\xeb\x8c\xaf\x5f\x98\x74\x15\x17\xc1\xb1\xfb\x75\x0e\xfb\x01\x40\xd9\xa0\x3e\x22\x60\x57\xfe\x0d\xd5\x91\xc7\xbb\x51\xa6\x70\xc7\xaa\xe7\x6d\xd4\x00\x60\x8e\x1c\x25\x8b\xff\xc0\x37\x49\xb9\x06\xee\x65\x52\x3e\xf8\x1e\xd9\x7f\x82\xc8\x2e\x1d\xe3\xe6\xff\xd8\xc0\xae\x00\xf5\x6b\x15\xf1\xc5\xc9\xb4\x73\xbb\x6a\xef\xfe\x54\x13\xa7\x8d\xef\x15\x54\xf0\x70\x29\xc5\x9a\x25\xa5\x47\x23\x20\x95\x26\x43\xb5\xe7\x55\xd4\xf3\xaa\xc2\xbf\xb2\xe2\x4f\xd1\xcd\x8d\x25\xda\x8b\xf1\xfb\x96\xf7\x4f\xb7\x1e\xa1\xe7\xb9\x1b\xcb\x6f\x1d\x9a\xef\xa2\xdc\x7c\xd3\x84\x7b\xc3\xb6\x71\xed\xed\xbb\xcf\x36\xbe\x4e\x21\x70\xe2\xcb\x9b\x74\x73\x0e\x9f\x11\x04\x4f\x37\xf9\x17\x59\xf6\x16\x20\xb8\x57\xd6\xbb\x74\x4b\x60\x3e\x59\xf8\xe5\x68\x78\xa4\x7e\x47\xed\x6b\x80\xc2\xc1\x4d\x48\x3e\x8e\xc0\x26\xe3\x7a\xab\xff\x29\x7d\x1f\xf6\x08\xc9\x8e\x60\xa9\xd4\xae\x3b\x2d\xaa\x9d\x8a\x36\x35\xb5\x9b\x14\xbe\x3c\x0c\x06\x83\x5a\x9e\x0a\x93\x50\x04\x24\x43\xf7\x89\x6d\x98\x28\xc8\xa0\x9a\x06\xca\x4f\x79\x3b\xbe\xce\x74\x2c\x6a\xf9\xb1\xdf\x41\x24\x7c\x0f\x5a\xad\x35\x02\x87\x54\x9c\xd1\xff\xee\x90\xd4\xde\xfc\x1d\xc1\xb3\xfd\x65\x19\xf9\x3d\x00\x00\xff\xff\x69\x79\xe9\x8f\x85\x2d\x00\x00")

func ResourcesComponentDescriptorV2SchemaYamlBytes() ([]byte, error) {
	return bindataRead(
		_ResourcesComponentDescriptorV2SchemaYaml,
		"../../../../../../../resources/component-descriptor-v2-schema.yaml",
	)
}

func ResourcesComponentDescriptorV2SchemaYaml() (*asset, error) {
	bytes, err := ResourcesComponentDescriptorV2SchemaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../../../../../resources/component-descriptor-v2-schema.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../../../../../resources/component-descriptor-v2-schema.yaml": ResourcesComponentDescriptorV2SchemaYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"..": {nil, map[string]*bintree{
			"..": {nil, map[string]*bintree{
				"..": {nil, map[string]*bintree{
					"..": {nil, map[string]*bintree{
						"..": {nil, map[string]*bintree{
							"..": {nil, map[string]*bintree{
								"resources": {nil, map[string]*bintree{
									"component-descriptor-v2-schema.yaml": {ResourcesComponentDescriptorV2SchemaYaml, map[string]*bintree{}},
								}},
							}},
						}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
