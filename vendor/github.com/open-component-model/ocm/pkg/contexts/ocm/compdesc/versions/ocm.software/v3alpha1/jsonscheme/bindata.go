// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package jsonscheme generated by go-bindata.
// sources:
// ../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml
package jsonscheme

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ResourcesComponentDescriptorOcmV3SchemaYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x8f\xdb\xb8\x11\x7f\xd7\xa7\x18\x5c\x02\xc8\x9b\x5d\xd9\xd9\x0d\x52\xe0\xfc\xb2\xd8\x26\x28\x10\xb4\x77\x7b\x48\xd2\x3e\x74\xb3\x0d\x68\x69\x6c\x33\x47\x91\x2e\x49\x79\xd7\xc9\xe5\xbb\x17\x24\x45\xfd\xb3\x24\x5b\xb6\x93\xb6\xb8\xdb\x97\x35\x29\xce\x1f\x0e\x7f\x33\x9c\x19\xe9\x29\x4d\xa6\x10\x2e\xb5\x5e\xa9\xe9\x64\xb2\x20\x32\x41\x8e\x72\x1c\x33\x91\x25\x13\x15\x2f\x31\x25\x6a\x12\x8b\x74\x25\x38\x72\x1d\x25\xa8\x62\x49\x57\x5a\xc8\x48\xc4\x69\xb4\x7e\x41\xd8\x6a\x49\x2e\xc3\xe0\xa9\x5b\x5b\xe1\xf5\x49\x09\x1e\xb9\xd9\xb1\x90\x8b\x49\x22\xc9\x5c\x4f\xae\x9e\x5f\x3d\x8f\x2e\xaf\x72\xd6\x61\xe0\x19\x52\xc1\xa7\x10\xde\xbe\xfa\x09\x5e\x79\x61\xf0\xba\x10\x06\xeb\x17\x50\x52\xcc\x29\xa7\x86\x40\x4d\x03\x80\x14\x35\x31\xff\x01\xf4\x66\x85\x53\x08\xc5\xec\x13\xc6\x3a\xb4\x53\x75\xee\xc5\x36\x60\x8d\x52\x51\xc1\x2d\x71\x42\x34\x71\xab\x25\xfe\x3b\xa3\x12\x13\xc7\x0e\x20\x82\x90\x93\x14\xc3\x72\x98\xd3\xb9\x19\x92\x24\x56\x0d\xc2\x7e\x91\x62\x85\x52\x53\x54\x53\x98\x13\xa6\xd0\x3e\x5f\x95\xb3\x39\x07\xc3\xcd\xff\x06\x78\x2a\x71\x3e\x85\xf0\xc9\xa4\xb2\xa3\xd2\xd4\x3f\x57\x24\xe7\x62\x77\x90\x4a\x64\xe4\x11\x93\x77\x98\xae\x51\x7a\x52\x46\x66\xc8\xd4\x0e\x4a\xb7\xc8\x93\xac\xa4\x58\xd3\x04\xe5\x0e\x22\xbf\xcc\x93\xc5\x12\x89\x79\xf2\x9e\x56\x37\xe9\x0e\x45\x69\x49\xf9\xa2\x98\x9c\x0b\x99\x12\x3d\x85\x84\x68\x8c\x34\x4d\x31\x08\xea\x9a\xe6\x47\x49\xa4\x24\x1b\xc7\x9f\x6a\x4c\x8b\x6d\x74\x6f\x22\xf4\x8c\x3a\x21\xb1\xc7\x21\x13\x96\xe5\xe3\x5d\x47\xd8\xb2\x3b\x4b\x3d\x85\x2f\x5f\xbb\xce\x6e\x45\xb4\x46\x69\xf0\xf8\xaf\xf5\xdd\xf3\xe8\xc7\xfb\xf3\xa7\x5e\xb8\xa2\x0b\x4e\xf9\xa2\xc9\x3f\x9c\x09\xc1\x90\xec\x01\xbb\x00\xa0\x06\xa0\x9a\x15\x9c\x9a\x8e\x49\x4a\x1e\xff\x86\x7c\xa1\x97\x53\xb8\x7a\xf9\x32\x68\xe8\x75\x47\xa2\xcf\xf7\x77\x11\x89\x3e\x1b\xfd\x9e\x8d\xee\xc6\xf7\x8d\xa9\xb3\x67\x7e\xee\xcb\xd5\xc5\xd7\xd1\xa4\xf6\xf8\x63\x0b\xc9\x47\x43\x73\x66\xb6\x1a\x00\xd0\x04\xb9\xa6\x7a\x73\xa3\xb5\xa4\xb3\x4c\xe3\x5f\x71\xe3\x54\x4d\x29\x2f\xf4\x6a\xd3\xca\x08\x1f\xdd\x45\x1f\xcf\xbd\x22\x7e\xf2\xec\xda\xb1\xae\x39\x81\xe3\xf9\x04\x34\xf9\x15\x39\xcc\xa5\x48\x41\xd9\x07\x26\x20\x01\xe1\x09\x90\xe4\x53\xa6\x34\x26\xa0\x05\x10\xc6\xc4\x03\x10\x0e\x62\xe5\xec\x0b\x0c\x49\x42\xf9\x02\xc2\x75\x78\x01\x29\xf9\x64\xa2\x1e\x67\x9b\x0b\x4b\x6a\xc7\xe3\x94\xf2\x7c\xd6\xcb\x5a\x52\x05\x29\x12\xae\x40\x2f\x11\xe6\xc2\x70\x35\x4c\x9c\xf9\x15\x10\x89\x46\x94\x01\x0a\x4d\xea\xfa\x2a\xaf\xf0\xe5\xf8\x6a\xfc\xa2\xfa\x3b\x9a\x0b\x71\x3e\x23\x32\x9f\x5b\x57\x17\xac\xdb\x56\x5c\x8e\xaf\xfc\xaf\x62\x59\x65\x7d\xf1\xb3\x46\x56\x35\xf6\xfa\xfe\x7a\xf4\xfc\xb7\xbb\xcb\xe8\xc7\xfb\x0f\xc9\xb3\xb3\xd1\xf5\xf4\xc3\xb8\x3a\x71\x76\xdd\x3e\x15\x8d\x46\xd7\xd3\x72\xf2\xb7\x0f\x89\x3d\xa3\x9b\xe8\x9f\xd1\xbd\x81\xbb\xff\xed\x59\xee\xb9\xf8\xcc\x4b\x3c\x1f\x55\x1f\x9c\x5b\x26\xb5\x19\xbb\x32\x77\xa9\x06\xf2\xdb\xa0\xd7\x19\x28\x72\xdf\xdf\x18\x3f\x52\x53\xf8\xd2\x1e\x75\xda\xa0\x1c\xc2\x57\x07\xc5\x95\x50\x54\x0b\xb9\x79\x25\xb8\xc6\x47\x3d\x24\x26\x99\x55\x5d\x31\xc8\x72\x68\xc6\x88\xca\x1e\x45\x4c\xdf\xb6\xcb\x26\x8c\xdd\xce\x4b\x29\x1d\xd7\x48\x83\xb4\x0c\x8d\x4d\x3d\x73\x5d\x67\x44\xe1\xdf\x25\x0b\xcb\x10\xb7\xa5\xb2\xf9\xcb\x97\x55\xa7\x5a\x63\x53\x7e\x9d\x54\xe3\xd8\x4f\x64\xb5\xaa\x05\xc6\x5e\x52\x00\xe4\x59\x3a\x85\xbb\x30\x93\xec\x17\xa2\x97\xe1\x05\x84\x6a\x49\xae\x5e\xfe\x29\x4a\xe8\x02\x95\x0e\xef\x83\x06\x9f\xa1\x9c\xad\x8d\x17\x54\x69\xb9\x31\xdc\x6f\x5f\xbd\x29\x86\xf7\xe6\x0c\x48\x1c\xa3\x52\x7b\x26\x26\xc6\x32\x76\x95\xb9\x19\x73\x52\x54\x30\x32\x23\x7c\xd4\xc8\xcd\x0d\xa2\xce\x76\x80\x25\x00\x58\x50\xbd\xcc\x66\x37\xfd\xb2\x7b\xd1\x66\x87\x06\x02\x95\x03\xb5\x33\xf3\x83\xd0\xd8\x34\x9b\x53\xb0\x30\x7f\x2e\x68\x07\xb9\x41\x69\xff\x8a\x58\xa4\x29\xd5\x7d\x3e\xc1\x05\xc7\x63\xec\x72\xe4\xbe\x7f\x16\x1c\x1d\x30\x94\xc8\x64\x8c\xaf\x0b\x87\x1b\xa0\x8e\xc9\x3d\x8a\x41\x9e\x57\x14\x63\xc3\xa1\x18\x38\x08\x0d\x48\x61\xb6\x14\xdf\x3f\xd8\xe5\x24\xf8\xa8\x25\x79\x93\x2f\xd8\x91\x3a\x6e\xf1\x39\x41\xa2\xbb\xc7\x71\x1c\x90\x0b\x57\xdd\xd8\x8e\xf9\xe6\x76\x5e\x0f\x7f\xad\x5c\x1c\x5d\xb8\x7b\x61\xd5\x63\xf7\x58\x6e\x8a\x2b\xbf\x38\x00\x70\xd1\xec\xdd\x0a\xe3\x01\x30\x5a\x12\xb5\xbc\x61\x0b\x21\xa9\x5e\xa6\x25\xb8\x4c\x4e\xce\xa8\xb2\x39\xfc\xf6\x63\x9b\xd6\x1e\x58\xf6\xd4\x04\xf6\x26\xcf\xed\x4a\xec\x91\x6f\xb7\xaf\x08\x5c\x4a\x4d\x74\x26\x71\xa0\x91\x48\x8f\x05\xcc\x28\xc5\x84\x92\xf7\xde\xe7\x86\xdb\x84\x1c\xbd\x39\x37\x55\xe8\x51\xae\xaa\xdf\x2d\xef\x97\xe8\x16\xb9\x0b\x46\xcc\x6d\x5a\x5a\x98\x05\x2a\xd5\x4e\xaf\xfd\x0e\x8d\x53\x0e\xa2\xc5\xb0\xe0\x77\xa0\xdd\x76\xd6\x5f\x4e\xde\x0e\x27\x2f\xfd\xa6\x5a\x7a\x55\xf6\xd9\x49\x59\xc3\x93\xbb\x59\xd0\x14\x10\xaf\x0f\xf1\xc4\x2e\x43\x1d\x52\x76\x36\x23\x67\xcb\x9a\x93\x84\xe8\xc1\xf6\x2d\x4c\x54\x34\x76\x9c\xad\x86\x5c\xc4\xbd\x37\x5f\x03\x61\x12\xf3\x2b\xd6\x49\x39\x09\xce\xbe\x4b\xab\xe6\x40\xe4\x36\xf6\xbb\x75\x07\x56\x9a\x28\xd0\x6c\xa4\x74\x8a\x69\x82\xda\x1e\xa3\x92\xf1\x5b\x9f\x8a\xed\xcc\x69\x89\x49\xdb\x50\x22\x8f\xd1\x16\xd7\x30\x2a\xbb\x88\x4c\xc4\x84\x9d\xe5\xa9\x50\x57\x7e\xe5\x11\xf8\x0e\x19\xc6\x5a\xec\x6a\x47\x75\x02\x76\xd0\xad\x6f\xcb\xb6\x5c\xed\x43\x37\x5a\xec\x73\xdf\x86\x53\x2b\x90\x8e\xef\x36\xb6\x74\x82\x86\x61\xb9\x2f\x51\x84\x27\x40\x62\x9d\x11\xc6\x36\xd3\x52\x52\x64\xef\x98\x87\x09\xa8\x15\xc6\x94\x30\x03\x4e\x2d\x69\x6c\x85\xfc\xff\xe6\x96\x07\x24\x8e\x4d\x67\x16\x1c\x9b\x89\x63\x6e\x50\x9e\x31\xb6\x47\xe6\xd7\x08\xa9\xde\xeb\xcb\xab\x7f\x60\x95\xe9\x19\xa8\xa1\xbd\x6f\x78\x62\xe9\xad\x0f\x97\x5c\x2e\xf2\xc6\x57\xa6\x34\xa4\x44\xc7\xcb\x8a\x1b\xa8\xad\x90\xbd\x5d\x70\x32\x9b\xf2\x55\xa6\xaa\x19\xf4\x1f\x35\x4c\xb1\x2b\x17\x83\x4f\x14\xe5\x1d\xb3\xf2\x22\x71\x87\xb0\x77\x51\x6b\x21\x10\x5e\x40\x88\x8f\x1a\x25\x27\xac\xa8\xeb\xff\x17\x2b\x2d\x11\xd3\x3f\x33\xb1\x7f\xa9\x65\x77\xf7\x17\xca\x50\x6d\x94\xc6\x74\x38\xed\x6d\x9b\xc0\x6f\x1d\x17\x44\x4c\xdf\xa4\x64\x71\x54\xaf\xc3\x0e\xa9\xe1\xf2\xd6\xdf\x6c\x27\x69\x82\x54\x7b\x66\x1e\x29\x75\x31\x3b\xba\x9a\xa5\x39\x8f\xd8\x18\x23\x1b\xef\x71\xc7\xed\x07\xc2\x5c\xa5\x10\xca\x7e\xd6\xbc\xab\x0e\xbb\x31\x1b\xa8\xa7\x0a\xa6\x10\x4b\x09\xa7\x73\x54\xba\x59\x81\x35\x84\x1e\x58\xe6\x39\xcb\xb8\xd0\xec\x1c\xc5\x69\xa0\x40\x8b\x1d\x12\x9b\x40\xdd\x16\xe7\x56\x78\x51\x9a\xc8\x05\x6a\x4c\x20\x16\x5c\x17\xc9\x4f\x27\x7b\x45\x3f\xf7\xee\xc5\x3c\x07\xca\x61\xb6\xd1\xa8\xbc\x8c\x99\x31\x76\x93\x2f\xcf\xd2\x99\x39\xd0\x00\xa0\xd3\x65\x8f\x80\xcb\x9c\x32\x2c\x6f\xc2\x63\x11\xd3\xa2\x61\x89\x1e\x2f\xaa\xcb\x2e\xfe\x79\xd5\x1c\xa0\x97\x44\x03\x55\x76\xef\xc6\xfc\x94\xdb\x67\x3f\x98\x87\xea\x07\x48\xa8\xb4\xd9\xf3\xa6\xf3\x3c\xbc\xdd\x6e\x4f\xe4\x5f\xdf\xc0\x60\xb7\x4d\x3f\xeb\x07\x67\x1d\x98\xd6\xdf\xe1\x81\xea\x65\x6e\x9a\x38\x93\x12\xb9\x2e\x13\x14\x28\xbf\x6a\xe8\xb3\x92\x0f\xad\x6f\xf3\x9c\x67\x88\x8d\xfa\xbe\x23\x68\x33\xe2\x1f\xd9\xcf\xee\xbb\xc4\x1e\xc6\x29\x53\x8e\xae\xb4\xa1\x72\xa1\x7e\x9f\x6b\x3c\x00\x28\x1b\xbd\x47\xb8\x62\xe6\xdf\xe1\x1c\x79\x71\x1b\x65\x0a\x43\x67\x3d\xef\x6b\x02\x80\x05\x72\x94\x34\xfe\x2f\xbe\x6b\xc9\x35\x70\xaf\x5b\xf2\xc1\xf7\xf6\xd9\xd3\x34\x36\x7f\x67\x3e\x5d\x1e\x9c\x9b\xff\x56\x2e\x5d\x83\xe8\xf7\x4a\xcc\xeb\x5f\x55\x0d\x45\xe0\x37\xc1\xd3\xd0\xce\x98\xea\xeb\x6e\xd7\xaf\x60\xdb\xff\x99\xd3\xd8\x16\x94\xfe\x26\xce\x33\x43\x33\xac\x74\xc9\x3c\xbc\xf4\xa1\x3b\xcd\x3b\x10\x27\x2a\x89\x1b\xaf\x67\x2b\xef\xa0\x5d\xe2\x7e\x22\x39\xb2\x5e\x59\x95\x0d\x9d\xe1\xfc\xb7\x2a\xe5\x9e\x4f\x3b\xca\xa6\x51\xb8\x0f\x41\x33\xe5\xd9\x8b\xa8\x11\x72\xc3\x20\x68\xc0\xa5\x8a\x74\x13\x37\x57\xf4\x1f\x65\x6c\x8d\x20\xfc\x95\xf2\x24\xff\x59\xfd\x40\x33\x72\xb0\x0a\x83\x3a\x04\x4a\xf2\x1a\x36\xab\x50\xaf\x14\x6c\xe9\xb8\xf1\x8d\x6b\xf1\x09\xeb\x85\x7b\xac\xc4\x5c\x3f\x10\x89\xe5\x03\x9b\x75\x1a\x9d\x3a\xf9\xc7\x82\x2b\x3d\x85\xb0\x78\xc3\x51\xd9\x8f\xdf\x81\x23\x6e\x35\x98\x59\x12\xb6\x7d\x30\xb4\xdf\xd7\x90\x8d\xf3\xef\x3e\xca\xad\x8f\x82\x42\x78\xe2\xb3\x61\xb6\xb9\x80\x07\x04\xc1\xd9\x26\xff\x10\xce\x16\x8d\x82\x63\xcd\xf1\xdb\x7d\x26\x7f\x1b\x51\xbc\x1b\x3b\xe2\x2b\xce\x82\x47\xd8\x78\xb5\x76\x04\xcf\xf6\xd7\x4f\xe1\x7f\x02\x00\x00\xff\xff\x8a\xc0\x0c\x71\xfb\x2c\x00\x00")

func ResourcesComponentDescriptorOcmV3SchemaYamlBytes() ([]byte, error) {
	return bindataRead(
		_ResourcesComponentDescriptorOcmV3SchemaYaml,
		"../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml",
	)
}

func ResourcesComponentDescriptorOcmV3SchemaYaml() (*asset, error) {
	bytes, err := ResourcesComponentDescriptorOcmV3SchemaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml", size: 11515, mode: os.FileMode(436), modTime: time.Unix(1684759079, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml": ResourcesComponentDescriptorOcmV3SchemaYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"..": {nil, map[string]*bintree{
			"..": {nil, map[string]*bintree{
				"..": {nil, map[string]*bintree{
					"..": {nil, map[string]*bintree{
						"..": {nil, map[string]*bintree{
							"..": {nil, map[string]*bintree{
								"..": {nil, map[string]*bintree{
									"resources": {nil, map[string]*bintree{
										"component-descriptor-ocm-v3-schema.yaml": {ResourcesComponentDescriptorOcmV3SchemaYaml, map[string]*bintree{}},
									}},
								}},
							}},
						}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
