// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package jsonscheme generated by go-bindata.
// sources:
// ../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml
package jsonscheme

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ResourcesComponentDescriptorOcmV3SchemaYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1a\xef\x6f\xdb\xb8\xf5\xbb\xfe\x8a\x87\x4b\x01\x39\x4d\x64\x37\x29\x3a\xe0\xfc\x25\xc8\x7a\x18\x50\x6c\x77\x39\xb4\xdd\x3e\x2c\xcd\x0a\x5a\x7a\xb6\xd9\xa3\x48\x8f\xa4\x9c\xb8\xbd\xfe\xef\x03\x49\x51\xa2\x64\xc9\x3f\x93\x6e\xc3\x35\x5f\x62\x52\xef\x37\xdf\x2f\x3e\xe9\x19\xcd\xc6\x10\xcf\xb5\x5e\xa8\xf1\x68\x34\x23\x32\x43\x8e\x72\x98\x32\x51\x64\x23\x95\xce\x31\x27\x6a\x94\x8a\x7c\x21\x38\x72\x9d\x64\xa8\x52\x49\x17\x5a\xc8\x44\xa4\x79\xb2\x7c\x49\xd8\x62\x4e\x2e\xe2\xe8\x99\x83\x0d\x68\x7d\x52\x82\x27\x6e\x77\x28\xe4\x6c\x94\x49\x32\xd5\xa3\xcb\x17\x97\x2f\x92\x8b\xcb\x92\x74\x1c\x79\x82\x54\xf0\x31\xc4\x37\xaf\x7f\x86\xd7\x9e\x19\xfc\x54\x31\x83\xe5\x4b\xa8\x31\xa6\x94\x53\x83\xa0\xc6\x11\x40\x8e\x9a\x98\xff\x00\x7a\xb5\xc0\x31\xc4\x62\xf2\x09\x53\x1d\xdb\xad\x26\xf5\x4a\x0d\x58\xa2\x54\x54\x70\x8b\x9c\x11\x4d\x1c\xb4\xc4\x7f\x17\x54\x62\xe6\xc8\x01\x24\x10\x73\x92\x63\x5c\x2f\x4b\x3c\xb7\x43\xb2\xcc\x8a\x41\xd8\xaf\x52\x2c\x50\x6a\x8a\x6a\x0c\x53\xc2\x14\xda\xe7\x8b\x7a\xb7\xa4\x60\xa8\xf9\xdf\x00\xcf\x24\x4e\xc7\x10\x9f\x8c\x02\x8d\x6a\x53\xff\x12\x70\x2e\xd9\x6e\x41\x95\xc8\xc8\x03\x66\xef\x30\x5f\xa2\xf4\xa8\x8c\x4c\x90\xa9\x2d\x98\x0e\xc8\xa3\x2c\xa4\x58\xd2\x0c\xe5\x16\x24\x0f\xe6\xd1\x52\x89\xc4\x3c\x79\x4f\x43\x25\xdd\xa1\x28\x2d\x29\x9f\x55\x9b\x53\x21\x73\xa2\xc7\x90\x11\x8d\x89\xa6\x39\x46\x51\x53\xd2\xf2\x28\x89\x94\x64\xe5\xe8\x53\x8d\x79\xa5\x46\xbf\x12\xb1\x27\xd4\xeb\x12\x3b\x1c\x32\x61\x45\xb9\xde\x76\x84\x1d\xda\x59\xec\x31\x7c\xf9\xda\x77\x76\x0b\xa2\x35\x4a\xe3\x8f\xff\x5a\xde\xbe\x48\x7e\xbc\x3b\x7b\xe6\x99\x2b\x3a\xe3\x44\x17\x72\x8d\x43\x3c\x11\x82\x21\xd9\xc1\xf1\x22\x80\x86\x0b\x35\xec\xe0\x04\x75\x44\x72\xf2\xf0\x37\xe4\x33\x3d\x1f\xc3\xe5\xab\x57\x51\x4b\xb2\x5b\x92\x7c\xbe\xbb\x4d\x48\xf2\xd9\x48\xf8\x7c\x70\x3b\xbc\x6b\x6d\x9d\x3e\xf7\x7b\x5f\x2e\xcf\xbf\x0e\x46\x8d\xc7\x1f\x3b\x50\x3e\x1a\x9c\x53\xa3\x6c\x04\x40\x33\xe4\x9a\xea\xd5\xb5\xd6\x92\x4e\x0a\x8d\x7f\xc5\x95\x13\x35\xa7\xbc\x92\xab\x4b\x2a\xc3\x7c\x70\x9b\x7c\x3c\xf3\x82\xf8\xcd\xd3\x2b\x47\xba\x11\x06\x8e\xe6\x09\x68\xf2\x1b\x72\x98\x4a\x91\x83\xb2\x0f\x4c\x4a\x02\xc2\x33\x20\xd9\xa7\x42\x69\xcc\x40\x0b\x20\x8c\x89\x7b\x20\x1c\xc4\xc2\xd9\x17\x18\x92\x8c\xf2\x19\xc4\xcb\xf8\x1c\x72\xf2\xc9\xe4\x3d\xce\x56\xe7\x16\xd5\xae\x87\x39\xe5\xe5\xae\xe7\x35\xa7\x0a\x72\x24\x5c\x81\x9e\x23\x4c\x85\xa1\x6a\x88\x38\xf3\x2b\x20\x12\x0d\x2b\xe3\x2a\x34\x6b\xca\xab\xbc\xc0\x17\xc3\xcb\xe1\xcb\xf0\x77\x32\x15\xe2\x6c\x42\x64\xb9\xb7\x0c\x01\x96\x5d\x10\x17\xc3\x4b\xff\xab\x02\x0b\xe0\xab\x9f\x0d\xb4\xd0\xd8\xcb\xbb\xab\xc1\x8b\xdf\x6f\x2f\x92\x1f\xef\x3e\x64\xcf\x4f\x07\x57\xe3\x0f\xc3\x70\xe3\xf4\xaa\x7b\x2b\x19\x0c\xae\xc6\xf5\xe6\xef\x1f\x32\x7b\x46\xd7\xc9\x3f\x93\x3b\xe3\xf0\xfe\xb7\x27\xb9\x23\xf0\xa9\xe7\x78\x36\x08\x1f\x9c\x59\x22\x8d\x1d\x0b\x59\x06\x55\xcb\xf3\xbb\x5c\xaf\x37\x55\x94\xd1\xbf\x32\x71\xa4\xc6\xf0\xa5\x3b\xef\x74\xb9\x72\x0c\x5f\x9d\x2b\x2e\x84\xa2\x5a\xc8\xd5\x6b\xc1\x35\x3e\xe8\x7d\xb2\x92\x81\xea\xcb\x42\x96\x42\x3b\x47\x04\x3a\x8a\x94\xbe\xed\xe6\x4d\x18\xbb\x99\xd6\x5c\x7a\x0a\x49\x0b\xb5\x4e\x8e\x6d\x39\x4b\x59\x27\x44\xe1\xdf\x25\x8b\xeb\x24\xb7\x26\xb2\xf9\x2b\xc1\xc2\xad\xce\xdc\x54\x16\x94\x30\x8f\xfd\x4c\x16\x0b\xca\x67\x3b\xa2\x02\x20\x2f\xf2\x31\xdc\xc6\x85\x64\xbf\x12\x3d\x8f\xcf\x21\x56\x73\x72\xf9\xea\x4f\x49\x46\x67\xa8\x74\x7c\x17\xb5\xe8\xec\x4b\xd9\xda\x78\x46\x95\x96\x2b\x43\xfd\xe6\xf5\x9b\x6a\x79\x67\xce\x80\xa4\x29\x2a\xb5\x63\x6b\x62\x2c\x63\xa1\x4c\x6d\x2c\x51\x51\xc1\xc0\xac\xf0\x41\x23\x37\x35\x44\x9d\x6e\x71\x96\x08\x60\x46\xf5\xbc\x98\x5c\x6f\xe6\xbd\xd1\xdb\xec\xd2\xb8\x40\x70\xa0\x76\x67\x7a\x90\x37\xb6\xcd\xe6\x04\xac\xcc\x5f\x32\xda\x82\x6e\xbc\x74\x33\x44\x2a\xf2\x9c\xea\x4d\x31\xc1\x05\xc7\x63\xec\x72\xa4\xde\xbf\x08\x8e\xce\x31\x94\x28\x64\x8a\x3f\x55\x01\xb7\x87\x38\xa6\xfb\xa8\x16\x65\x67\x51\xad\x0d\x85\x6a\xe1\x5c\x68\x8f\x26\x66\x4d\xf0\xdd\x93\x5d\x89\x82\x0f\x5a\x92\x37\x25\xc0\x96\xe6\x71\x8d\xce\x23\xb4\xba\x3b\x1c\xc7\x01\xdd\x70\x18\xc6\x76\xcd\x57\x37\xd3\x66\xfa\xeb\xa4\xe2\xf0\xe2\xed\x80\x61\xc4\xee\x00\x6e\xae\x57\x1e\x38\x02\x70\xd9\xec\xdd\x02\xd3\x3d\xdc\x68\x4e\xd4\xfc\x9a\xcd\x84\xa4\x7a\x9e\xd7\xce\x65\xba\x72\x46\x95\xed\xe2\xd7\x1f\xdb\xc6\xf6\xc0\x8b\x4f\x83\xe1\xc6\xf6\xb9\x5b\x88\x1d\x3a\xee\x6e\x88\x28\x68\xaa\xf7\x34\x12\xd9\x60\x01\xb3\xca\x31\xa3\xe4\xbd\x8f\xb9\xfd\x6d\x42\x8e\x56\xce\x6d\x55\x72\xd4\x50\xcd\xda\xf2\x7e\x8e\x0e\xc8\x15\x18\x31\xb5\x6d\x69\x65\x16\x08\xee\x3b\x1b\xed\x77\x68\x9e\x72\x2e\x5a\x2d\x2b\x7a\x07\xda\x6d\xeb\x0d\xcc\xf1\xdb\x12\xe4\x75\xdc\x6c\xb8\x7c\x75\x62\x36\xfc\xc9\xc6\xa0\x92\xe9\x5b\x5f\xa0\xb6\x56\x7a\x62\x8a\x19\x4a\xe4\x29\xda\x2b\x07\x0c\xea\xe9\x0a\x13\x29\x61\xa7\x65\x81\xe8\xab\x3a\x3e\x75\xbe\x43\x86\xa9\x16\xdb\xae\xe9\xbd\x99\x76\xaf\x5c\x68\x9b\xd9\x52\xec\x43\x15\xad\xf4\xdc\xf5\x22\xde\x39\x0b\x39\x7e\x0a\xd3\x71\x3f\xee\xd5\xbf\x53\x84\x4d\xe5\x13\x4e\x80\xa4\xba\x20\x8c\xad\xc6\x35\xa7\xc4\x46\xde\xfd\x08\xd4\x02\x53\x4a\x18\x48\x34\xf0\xa9\x65\xf2\xff\x5b\x71\x0f\x28\xa7\xed\xe0\x14\x1c\xdb\xe5\xb4\x34\x28\x2f\x18\xdb\xa1\x1e\x86\x81\x6c\xbd\xd4\x45\x4f\x9d\x10\xf7\xec\xbd\x3d\x01\xb5\xef\x4c\x10\x4e\x2c\xbe\x8d\xe1\x9a\xca\x79\x39\x0e\x28\x94\x86\x9c\xe8\x74\x1e\x84\x81\x5a\x6b\xe1\xd6\xdb\x70\x66\x0b\x61\xb0\x15\xf6\x15\xdf\x3b\xbb\x4a\x2b\x97\x83\xd5\x1a\x54\x30\x42\x84\xf6\x18\xb1\x57\x08\x47\xac\xbe\x7c\xb8\x43\xd8\xb9\xd5\xb7\x2e\x60\xee\x84\xe6\xe6\x26\x39\x61\xd5\x6d\xe7\x7f\xb1\xff\x14\x29\xfd\x33\x13\xbb\x37\xa0\x56\xbb\xbf\x50\x86\x6a\xa5\x34\xe6\xfb\xe3\xde\x74\x31\x7c\xea\xbc\x20\x52\xfa\x26\x27\xb3\xa3\x6e\x80\x76\x49\x0d\x95\xb7\xbe\xb2\x3d\xca\xd5\x30\x9c\x24\x78\x4f\x69\xb2\xd9\x32\xeb\xa9\xcd\x79\x84\x62\x8c\xac\x7c\xc4\x1d\xa7\x0f\xc4\xa5\x48\x31\xd4\xb7\xfc\x69\x5f\x77\x7a\x6d\x14\x68\xb6\x0a\xa6\x3d\xcd\x09\xa7\x53\x54\xba\xdd\x97\xb6\x98\x1e\xd8\xfc\x3a\xcb\xb8\xd4\xec\x02\xc5\x49\xa0\x40\x8b\x2d\x1c\xdb\x8e\xba\xce\xce\x41\x78\x56\x9a\xc8\x19\x6a\xcc\x20\x15\x5c\x57\xcd\x4f\x2f\x79\x45\x3f\x6f\xd4\xc5\x3c\x07\xca\x61\xb2\xd2\xa8\x3c\x8f\x89\x31\x76\x9b\x2e\x2f\xf2\x89\x39\xd0\x08\xa0\x37\x64\x8f\x70\x97\x29\x65\x58\x57\xc2\x63\x3d\xa6\x43\xc2\xda\x7b\x3c\xab\x3e\xbb\xf8\xe7\xa1\x39\x40\xcf\x89\x06\xaa\xac\xee\xc6\xfc\x94\xdb\x67\x3f\x98\x87\xea\x07\xc8\xa8\xb4\xdd\xf3\xaa\xf7\x3c\xbc\xdd\x6e\x1e\x29\xbe\x9e\xc0\x60\x37\xed\x38\xdb\xec\x9c\x4d\xc7\xb4\xf1\x0e\xf7\x54\xcf\x4b\xd3\xa4\x85\x94\xc8\x75\xdd\xa0\x40\xfd\xb6\x77\x93\x95\x7c\x6a\x7d\x5b\xf6\x3c\xc7\xbc\x7a\x0b\x3b\xfb\x2e\x23\x7e\xef\x7e\xb6\xd7\x12\x7b\x18\x8f\xd9\x72\xf4\xb5\x0d\x41\x41\xfd\x36\x65\x3c\x02\xa8\xc7\x5f\x47\x84\x62\xe1\x27\xdb\x47\x16\x6e\x23\x4c\x65\xe8\x62\xc3\x14\x3b\x02\x98\x21\x47\x49\xd3\xff\xe2\x04\xba\x94\xc0\x0d\xa1\xcb\xc5\xb7\x8e\xd9\xc7\x19\xf7\xfc\xc1\x62\xba\x3e\x38\xb7\xff\x54\x21\xdd\x70\xd1\x6f\xd5\x98\x37\xbf\x36\xd9\xd7\x03\x9f\xc4\x9f\xf6\x9d\x8c\xa9\x4d\x83\xe5\x66\x09\xb6\xf3\x9f\x29\x4d\xed\x85\xd2\x57\xe2\xb2\x33\x34\xcb\x60\x4a\xe6\xdd\x4b\x1f\xaa\x69\x39\x81\x78\xa4\x2b\x71\xeb\xa5\x55\xf0\x66\xce\x35\xee\x8f\xc4\x47\x36\x6f\x56\xf5\x40\x67\x7f\xfa\x6b\x37\xe5\x0d\x2f\xbc\xeb\xa1\x51\xbc\x0b\x42\xbb\xe5\xd9\x09\xa9\x95\x72\xe3\x28\x6a\xb9\x4b\xe8\xe9\x26\x6f\x2e\xe8\x3f\xea\xdc\x9a\x40\xfc\x1b\xe5\x59\xf9\x33\xfc\x70\x2d\x71\x6e\x15\x47\x4d\x17\xa8\xd1\x1b\xbe\x19\xba\x7a\x70\x61\xcb\x87\xad\x6f\xff\xaa\x4f\xfb\xce\xdd\x63\x25\xa6\xfa\x9e\x48\xac\x1f\xd8\xae\xd3\xc8\xd4\x4b\x3f\x15\x5c\xe9\x31\xc4\xd5\x27\x7d\x81\x3e\x5e\x03\x87\xdc\x69\x30\x03\x12\x77\x7d\x46\xb1\xdb\x57\x62\xad\xf3\xef\x3f\xca\xb5\x4f\x25\x62\x38\xf1\xdd\x30\x5b\x9d\xc3\x3d\x82\xe0\x6c\x55\x7e\x1e\x64\x2f\x8d\x82\x63\x23\xf0\xbb\x63\xa6\x7c\xbb\x50\xbd\x31\x38\xe2\xeb\xb6\x8a\x46\xfc\x9f\x00\x00\x00\xff\xff\xa3\x19\x1f\x72\xb2\x29\x00\x00")

func ResourcesComponentDescriptorOcmV3SchemaYamlBytes() ([]byte, error) {
	return bindataRead(
		_ResourcesComponentDescriptorOcmV3SchemaYaml,
		"../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml",
	)
}

func ResourcesComponentDescriptorOcmV3SchemaYaml() (*asset, error) {
	bytes, err := ResourcesComponentDescriptorOcmV3SchemaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml", size: 10674, mode: os.FileMode(436), modTime: time.Unix(1673540890, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml": ResourcesComponentDescriptorOcmV3SchemaYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"..": {nil, map[string]*bintree{
			"..": {nil, map[string]*bintree{
				"..": {nil, map[string]*bintree{
					"..": {nil, map[string]*bintree{
						"..": {nil, map[string]*bintree{
							"..": {nil, map[string]*bintree{
								"..": {nil, map[string]*bintree{
									"resources": {nil, map[string]*bintree{
										"component-descriptor-ocm-v3-schema.yaml": {ResourcesComponentDescriptorOcmV3SchemaYaml, map[string]*bintree{}},
									}},
								}},
							}},
						}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
