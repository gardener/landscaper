// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package jsonscheme generated by go-bindata.// sources:
// ../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml
package jsonscheme

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ResourcesComponentDescriptorOcmV3SchemaYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1a\x5d\x6f\xdb\x38\xf2\xdd\xbf\x62\xb0\x29\x20\xa7\x89\xe2\x24\x45\x0f\xa8\x5f\x82\x5c\x8b\x03\x8a\xbb\xdd\x2c\xda\xde\x3d\x5c\x9a\x2b\x68\x69\x64\xb3\x4b\x91\x3e\x92\x76\xe2\xed\xf6\xbf\x1f\x48\x8a\x12\x25\x4b\xb6\x65\xbb\xbd\x3b\xec\xf6\xa1\x31\xa9\xf9\xe2\x70\x66\x38\x33\xe4\x33\x9a\x8e\x21\x9a\x69\x3d\x57\xe3\xd1\x68\x4a\x64\x8a\x1c\xe5\x45\xc2\xc4\x22\x1d\xa9\x64\x86\x39\x51\xa3\x44\xe4\x73\xc1\x91\xeb\x38\x45\x95\x48\x3a\xd7\x42\xc6\x22\xc9\xe3\xe5\x0b\xc2\xe6\x33\x72\x15\x0d\x9e\x39\xd8\x80\xd6\x67\x25\x78\xec\x66\x2f\x84\x9c\x8e\x52\x49\x32\x3d\xba\xbe\xbc\xbe\x8c\xaf\xae\x0b\xd2\xd1\xc0\x13\xa4\x82\x8f\x21\xba\x7b\xfd\x23\xbc\xf6\xcc\xe0\x4d\xc9\x0c\x96\x2f\xa0\xc2\xc8\x28\xa7\x06\x41\x8d\x07\x00\x39\x6a\x62\xfe\x02\xe8\xd5\x1c\xc7\x10\x89\xc9\x67\x4c\x74\x64\xa7\xea\xd4\xcb\x65\xc0\x12\xa5\xa2\x82\x5b\xe4\x94\x68\xe2\xa0\x25\xfe\x7b\x41\x25\xa6\x8e\x1c\x40\x0c\x11\x27\x39\x46\xd5\xb0\xc0\x73\x33\x24\x4d\xad\x18\x84\xfd\x2c\xc5\x1c\xa5\xa6\xa8\xc6\x90\x11\xa6\xd0\x7e\x9f\x57\xb3\x05\x05\x43\xcd\xff\x06\x78\x26\x31\x1b\x43\x74\x32\x0a\x56\x54\xa9\xfa\xa7\x80\x73\xc1\x76\x0b\xaa\x44\x46\x9e\x30\x7d\x8f\xf9\x12\xa5\x47\x65\x64\x82\x4c\x6d\xc1\x74\x40\x1e\x65\x2e\xc5\x92\xa6\x28\xb7\x20\x79\x30\x8f\x96\x48\x24\xe6\xcb\x07\x1a\x2e\xd2\x6d\x8a\xd2\x92\xf2\x69\x39\x99\x09\x99\x13\x3d\x86\x94\x68\x8c\x35\xcd\x71\x60\x37\x52\x4e\xb1\x73\x27\xd7\x95\x49\xd8\x54\x48\xaa\x67\x79\xc5\x6c\x4e\xb4\x46\x69\xb6\xfa\x5f\xf7\x24\xfe\xf5\xc1\xfc\x77\x19\xbf\x1a\x7d\x8a\x1f\xce\x9e\x95\x72\x0a\x9e\xd1\xe9\x18\xbe\xc0\xd7\x1d\xb6\x31\xd4\x5f\x21\x16\x91\x92\xac\x1c\x35\xaa\x31\x2f\x05\xea\x56\x6d\xe4\x09\x75\x2e\x6f\x07\xd3\x23\x6c\x81\x5d\xba\xa8\x1b\x56\x8b\xce\x2d\xf6\x18\xbe\x7c\xed\xb2\xa8\x40\x75\xcb\xfb\xcb\xf8\x55\xa0\x30\x45\xa7\x9c\xf2\x69\x93\x7e\x34\x11\x82\x21\xe1\x1e\x2c\xd8\xbf\x4e\x6d\x58\x98\xed\xde\x33\x30\xbb\x14\xf8\x41\x4d\x6d\x6e\x5d\x8e\x48\x4e\x9e\xfe\x86\x7c\xaa\x67\x63\xb8\x7e\xf9\x72\xd0\x6a\x03\xb1\x33\x82\x87\xe7\xc3\xfb\x8b\x87\xc6\xd4\xe9\x73\x3f\xf7\xe5\xfa\xfc\xeb\x70\x54\xfb\xfc\xa9\x05\xe5\x93\xc1\x39\x35\xba\x19\x00\xd0\x14\xb9\xa6\x7a\x75\xab\xb5\xa4\x93\x85\xc6\xbf\xe2\xca\x89\x9a\x53\x5e\xca\xd5\x26\x95\x61\x3e\xbc\x8f\x3f\x9d\x79\x41\xfc\xe4\xe9\x8d\x23\x5d\xf3\x65\x47\xf3\x04\x34\xf9\x05\x39\x64\x52\xe4\xa0\xec\x07\x13\x57\x81\xf0\x14\x48\xfa\x79\xa1\x34\xa6\xa0\x05\x10\xc6\xc4\x23\x10\x0e\x62\xee\xf4\x0b\x0c\x49\x4a\xf9\x14\xa2\x65\x74\x0e\x39\xf9\x6c\x82\x37\x67\xab\x73\x8b\x6a\xc7\x17\x39\xe5\xc5\xac\xe7\x35\xa3\x0a\x72\x24\x5c\x81\x9e\x21\x64\xc2\x50\x35\x44\x9c\xfa\x15\x10\x89\x86\x95\xb1\x2c\x9a\xd6\xe5\x55\x5e\xe0\xab\x8b\xeb\x8b\x17\xe1\xef\x38\x13\xe2\x6c\x42\x64\x31\xb7\x0c\x01\x96\x6d\x10\x57\x17\xd7\xfe\x57\x09\x16\xc0\x97\x3f\x6b\x68\xa1\xb2\x97\x0f\x37\xc3\xcb\xdf\xee\xaf\xe2\x57\x0f\x1f\xd3\xe7\xa7\xc3\x9b\xf1\xc7\x8b\x70\xe2\xf4\xa6\x7d\x2a\x1e\x0e\x6f\xc6\xd5\xe4\x6f\x1f\x53\xbb\x47\xb7\xf1\x3f\xe3\x07\xe3\x1f\xfe\xb7\x27\xb9\x23\xf0\xa9\xe7\x78\x36\x0c\x3f\x9c\x59\x22\xb5\x19\x0b\x59\xf8\x60\xc3\xf2\xdb\x4c\x6f\x5b\xe0\x5c\x19\x3f\x52\x26\xea\xb5\x3a\x66\x9b\x29\x47\xf0\xd5\x99\xe2\x5c\x28\xaa\x85\x5c\xbd\x16\x5c\xe3\x93\xee\x13\xc4\x0c\x54\x57\xd0\xb2\x14\x9a\x41\x25\x58\xa3\x48\xe8\xbb\x76\xde\x84\xb1\xbb\xac\xe2\xd2\x71\x1a\x36\x50\xab\x58\xda\x94\xb3\x90\x75\x42\x14\xfe\x5d\xb2\xa8\x8a\x89\x6b\x22\x9b\x7f\x05\x58\x38\xd5\x1a\x9b\xfc\x69\x13\xc4\xb1\x1f\xc9\x7c\x5e\x8b\xa4\x1b\x51\x01\x90\x2f\xf2\x31\xdc\x47\x0b\xc9\x7e\x26\x7a\x16\x9d\x43\xa4\x66\xe4\xfa\xe5\x9f\xe2\x94\x4e\x51\xe9\xe8\x61\xd0\xa0\xd3\x97\xb2\xd5\xf1\x94\x2a\x2d\x57\x86\xfa\xdd\xeb\xb7\xe5\xf0\xc1\xec\x01\x49\x12\x54\x6a\xc7\xfc\xca\x68\xc6\x42\x99\x03\xbe\x40\x45\x05\x43\x33\xc2\x27\x8d\xdc\x1c\x39\xea\x74\x8b\xb1\x0c\x00\xa6\x54\xcf\x16\x93\xdb\xcd\xbc\x37\x5a\x9b\x1d\x1a\x13\x08\x36\xd4\xce\x64\x7b\x59\x63\x53\x6d\x4e\xc0\x52\xfd\x05\xa3\x2d\xe8\xc6\x4a\x37\x43\x24\x22\xcf\xa9\xde\xe4\x13\x5c\x70\x3c\x44\x2f\x07\xae\xfb\x27\xc1\xd1\x19\x86\x12\x0b\x99\xe0\x9b\xd2\xe1\x7a\x88\x63\x92\x95\x72\x50\x24\x22\xe5\xd8\x50\x28\x07\xce\x84\x7a\xe4\x3c\x6b\x82\xef\x1e\xec\x0a\x14\x7c\xd2\x92\xbc\x2d\x00\xb6\x64\x33\x6b\x74\x8e\x90\xaf\xef\xb0\x1d\x7b\xa4\xf4\xa1\x1b\xdb\x31\x5f\xdd\x65\xf5\xf0\xd7\x4a\xc5\xe1\x45\xdb\x01\x43\x8f\xdd\x01\xdc\xd4\x88\x1e\x78\x00\xe0\xa2\xd9\xfb\x39\x26\x3d\xcc\x68\x46\xd4\xec\xd6\xd7\x00\x95\x71\x99\xd2\x82\x51\x65\x4b\x91\xf5\xcf\x36\x0f\xde\x21\xed\x6f\x33\xb8\x1a\xc3\x8d\xd9\x76\xbb\x10\x3b\x24\xe8\xed\x10\x03\x00\x53\x24\x29\x4d\xf2\x79\x53\x49\x4e\x47\x1d\x12\x6f\x22\x5a\x4c\xed\x59\xac\x99\x9a\x80\xe8\x85\xc4\x9e\x9b\x46\x36\xec\x88\x19\xe5\x98\x52\xf2\xc1\xc7\x80\xfe\x7b\xd4\x52\x14\xf6\x54\xb6\x9b\x2a\xe5\xa8\xa0\xea\x67\xdd\x87\x19\x3a\x20\x77\xe0\x89\xcc\xa6\xc9\xa5\x5a\x20\x28\xd7\xda\xf6\xb3\x04\xdc\x37\x6e\x3a\x97\x29\x87\x25\xbd\x3d\xf5\xb6\xb5\x80\x74\xfc\xb6\x04\x9d\xca\x8f\xc3\xda\x31\x58\x67\x27\x66\xcd\x9e\xa2\xc0\x38\xad\xd1\x6f\x41\xae\x39\x87\x3b\x26\xd1\x54\x43\x6f\xf6\x09\x2b\x5d\x5a\xde\xa7\xe8\x6e\x1e\x03\x2d\x30\x47\x39\x6f\x7a\x6f\x4e\xa9\xa2\xb2\xd9\xe6\x74\xd5\x27\xab\xd8\x78\x8c\x37\xcc\x53\x62\x91\x2f\x38\x2e\x47\x31\xd2\xef\xd2\x3e\xdb\xd3\xec\x1b\xeb\x5d\x3b\xd0\x83\x16\x12\x34\xdb\x48\x9d\x6c\x9a\x46\x6d\xb7\x51\xc9\xe4\x9d\xcf\x2b\xb7\x26\xe8\xc4\xe4\xa0\x28\x91\x27\x68\x3b\x05\x30\xac\x3a\xbb\x4c\x24\x84\x9d\x16\x79\x5d\x57\xb2\xe8\x2d\xf0\x3d\x32\x4c\xb4\xd8\xd6\x22\xec\x34\xd8\x5e\x29\x8c\xad\x41\x0b\xb1\xf7\x5d\x68\xb9\xce\x5d\xdb\x6d\xad\x86\x74\x78\x07\xb8\xa5\xad\xd5\xcf\x96\x37\x65\xbd\x70\x02\x24\xd1\x0b\xc2\xd8\x6a\x5c\x71\x8a\xed\x01\xf5\x38\x02\x35\xc7\x84\x12\x66\x8c\x53\x4b\x9a\x58\x26\xff\xbf\x89\xf2\x1e\x59\x70\xd3\x99\x05\xc7\x66\x16\x5c\x28\x94\x2f\x18\xdb\x21\x8d\x6d\x84\x54\xef\xf5\x55\xde\xd0\xb3\x64\xf6\x04\x54\xdf\xfb\x08\x38\xb1\xf8\xd6\x87\x2b\x2a\xe7\x45\x17\x6f\xa1\x34\xe4\x44\x27\xb3\xc0\x0d\xd4\x5a\xc8\x5e\xaf\x9e\x99\xcd\x5f\x83\xa9\xb0\x1c\xf8\xa3\x20\x2b\x57\xe5\x62\xf0\x91\xa2\xbc\x23\x56\x1d\x24\x6e\x13\x76\xae\xd0\xad\x09\x44\xe7\x10\xe1\x93\x46\xc9\x09\x2b\x9b\x14\xff\x8b\x65\xa3\x48\xe8\x9f\x99\xd8\xbd\x6e\xb4\xab\xfb\x0b\x65\xa8\x56\x4a\x63\xde\x1f\xf7\xae\x8d\xe1\xb7\x8e\x0b\x22\xa1\x6f\x73\x32\x3d\xa8\x71\x63\x87\xd4\x50\x79\xe7\x4f\xb6\xa3\x74\x74\xc2\x06\xa0\xb7\x94\x3a\x9b\x2d\x2d\xda\x4a\x9d\x07\x2c\x8c\x91\x95\xf7\xb8\xc3\xd6\x03\x51\x21\x52\x04\x55\x73\x2e\xeb\x2a\xe2\x6e\xcd\x02\xea\xa9\x82\xa9\xe2\x72\xc2\x69\x86\x4a\x37\xcb\xb7\x06\xd3\x3d\x6b\x44\xa7\x19\x17\x9a\x9d\xa3\x38\x09\x14\x68\xb1\x85\x63\xd3\x50\xd7\xd9\x39\x08\xcf\x4a\x13\x39\x45\x8d\x29\x24\x82\xeb\x32\xf9\xe9\x24\xaf\xe8\xaf\x1b\xd7\x62\xbe\x03\xe5\x30\x59\x69\x54\x9e\xc7\xc4\x28\xbb\x49\x97\x2f\xf2\x89\xd9\xd0\x01\x40\xa7\xcb\x1e\x60\x2e\x19\x65\x58\x9d\x84\x87\x5a\x4c\x8b\x84\x95\xf5\x78\x56\x5d\x7a\xf1\xdf\x43\x75\x80\x9e\x11\x0d\x54\xd9\xb5\x1b\xf5\x53\x6e\xbf\xfd\x60\x3e\xaa\x1f\x20\xa5\xd2\x66\xcf\xab\xce\xfd\xf0\x7a\xbb\x3b\x92\x7f\x7d\x03\x85\xdd\x35\xfd\x6c\xb3\x71\xd6\x0d\xd3\xfa\x3b\x3c\x52\x3d\x2b\x54\x93\x2c\xa4\x44\xae\xab\x04\x05\xaa\x97\x26\x9b\xb4\xe4\x43\xeb\xbb\x22\xe7\xe9\xa3\xa3\x4d\x6f\x3b\xda\x94\xf8\x47\xf6\xb3\xfd\x2c\xb1\x9b\x71\xcc\x94\xa3\x2b\x6d\x08\x0e\xd4\xef\x73\x8c\x0f\x00\xaa\xae\xf5\x01\xae\xb8\xf0\x17\x52\x07\x1e\xdc\x46\x98\x52\xd1\x8b\x0d\x97\x4f\x03\x80\x29\x72\x94\x34\xf9\x2f\x5e\x1c\x15\x12\xb8\xbb\xa3\x62\xf0\xbd\x7d\xf6\x38\x5d\xd1\xdf\x99\x4f\x57\x1b\xe7\xe6\xbf\x95\x4b\xd7\x4c\xf4\x7b\x25\xe6\xf5\x97\x6e\x7d\x2d\xf0\x9b\xd8\x53\xdf\xce\x98\xda\xd4\xdd\xae\x1f\xc1\xb6\xff\x93\xd1\xc4\x16\x94\xfe\x24\x2e\x32\x43\x33\x0c\xba\x64\xde\xbc\xf4\xbe\x2b\x2d\x3a\x10\x47\x2a\x89\x1b\x77\xcd\xc1\x85\xba\x4b\xdc\x8f\xc4\x47\xd6\x2b\xab\xaa\xa1\xd3\x9f\xfe\x5a\xa5\xbc\xe1\x9d\x4a\xd5\x34\x8a\x76\x41\x68\xa6\x3c\x3b\x21\x35\x42\x6e\x34\x18\x34\xcc\x25\xb4\x74\x13\x37\xe7\xf4\x1f\x55\x6c\x8d\x21\xfa\x85\xf2\xb4\xf8\x19\x3e\x9a\x8d\x9d\x59\x45\x83\xba\x09\x54\xe8\x35\xdb\x0c\x4d\x3d\x28\xd8\xf2\x8b\xc6\xbb\xe3\xf2\x59\xf1\xb9\xfb\xac\x44\xa6\x1f\x89\xc4\xea\x83\xcd\x3a\x8d\x4c\x9d\xf4\x13\xc1\x95\x1e\x43\x54\xde\x70\x04\xeb\xf1\x2b\x70\xc8\x1d\x2f\x15\xdd\x02\xd7\x9e\x11\xed\xf6\x16\xb4\xb1\xff\xdd\x5b\xb9\xf6\xc2\x29\x82\x13\x9f\x0d\xb3\xd5\x39\x3c\x22\x08\xce\x56\xc5\xab\x3e\x5b\x34\x0a\x8e\x35\xc7\x6f\xf7\x99\xe2\x36\xa2\xbc\x58\x3b\xe0\x0d\x6b\x49\x23\x6a\x5c\xad\x1d\x40\xb3\xfd\xfa\x29\xfa\x4f\x00\x00\x00\xff\xff\x45\xa5\x68\x74\x8f\x2e\x00\x00")

func ResourcesComponentDescriptorOcmV3SchemaYamlBytes() ([]byte, error) {
	return bindataRead(
		_ResourcesComponentDescriptorOcmV3SchemaYaml,
		"../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml",
	)
}

func ResourcesComponentDescriptorOcmV3SchemaYaml() (*asset, error) {
	bytes, err := ResourcesComponentDescriptorOcmV3SchemaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml": ResourcesComponentDescriptorOcmV3SchemaYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"..": {nil, map[string]*bintree{
			"..": {nil, map[string]*bintree{
				"..": {nil, map[string]*bintree{
					"..": {nil, map[string]*bintree{
						"..": {nil, map[string]*bintree{
							"..": {nil, map[string]*bintree{
								"..": {nil, map[string]*bintree{
									"resources": {nil, map[string]*bintree{
										"component-descriptor-ocm-v3-schema.yaml": {ResourcesComponentDescriptorOcmV3SchemaYaml, map[string]*bintree{}},
									}},
								}},
							}},
						}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
