#!/bin/bash

# SPDX-FileCopyrightText: 2020 SAP SE or an SAP affiliate company and Gardener contributors
#
# SPDX-License-Identifier: Apache-2.0

set -o errexit
set -o nounset
set -o pipefail

KUBECONFIG_PATH=$1
VERSION=$2
TMP=$3

SOURCE_PATH="$(dirname $0)/../.."
cd "${SOURCE_PATH}"
SOURCE_PATH="$(pwd)"

echo "Install landscaper version ${VERSION} and kubeconfig $KUBECONFIG_PATH"

TMP_GEN="$TMP/gen"
mkdir -p $TMP_GEN

echo "> Installing Landscaper version ${VERSION}"

printf "
landscaper:
  landscaper:
    verbosity: debug
    deployItemTimeouts:
      pickup: 30s
      abort: 30s
    useOCMLib: true
" > $TMP/landscaper-values.yaml

touch $TMP/registry-values.yaml
if [[ -f "$TMP/docker.config" ]]; then
  printf "
landscaper:
  landscaper:
    truststore:
      secrets:
        registryCA: |
$(cat "$TMP/cacerts.crt" | sed "s/^/          /")
    registryConfig:
      allowPlainHttpRegistries: false
      insecureSkipVerify: true
      secrets:
        default: $(cat "$TMP/docker.config")
  " > $TMP/registry-values.yaml
fi

echo "Pull landscaper helm chart"
export HELM_EXPERIMENTAL_OCI=1
helm pull oci://europe-docker.pkg.dev/sap-gcp-cp-k8s-stable-hub/landscaper/github.com/gardener/landscaper/charts/landscaper --version $VERSION --untar --destination $TMP_GEN
helm pull oci://europe-docker.pkg.dev/sap-gcp-cp-k8s-stable-hub/landscaper/github.com/gardener/landscaper/manifest-deployer/charts/manifest-deployer --version $VERSION --untar --destination $TMP_GEN
helm pull oci://europe-docker.pkg.dev/sap-gcp-cp-k8s-stable-hub/landscaper/github.com/gardener/landscaper/helm-deployer/charts/helm-deployer --version $VERSION --untar --destination $TMP_GEN
helm pull oci://europe-docker.pkg.dev/sap-gcp-cp-k8s-stable-hub/landscaper/github.com/gardener/landscaper/container-deployer/charts/container-deployer --version $VERSION --untar --destination $TMP_GEN
helm pull oci://europe-docker.pkg.dev/sap-gcp-cp-k8s-stable-hub/landscaper/github.com/gardener/landscaper/mock-deployer/charts/mock-deployer --version $VERSION --untar --destination $TMP_GEN

echo "Upgrade landscaper"
helm upgrade --kubeconfig=$KUBECONFIG_PATH --install --wait --create-namespace -n ls-system \
  -f $TMP/landscaper-values.yaml -f $TMP/registry-values.yaml landscaper $TMP_GEN/landscaper --set "landscaper.image.tag=${VERSION}"

landscaper_ready=false
retries_left=20

while [ "$landscaper_ready" = false ]; do
  kubectl --kubeconfig=$KUBECONFIG_PATH get customresourcedefinitions.apiextensions.k8s.io installations.landscaper.gardener.cloud
  if [ "$?" = 0 ]; then
    landscaper_ready=true
  fi

  if [ "retries_left" == 0 ]; then
    >&2 echo "landscaper is not ready after max retries"
    exit 1
  fi

  retries_left="$((${retries_left}-1))"
  sleep 1
done

echo "Upgrade manifest deployer"
printf "
nameOverride: manifest-deployer
fullnameOverride: manifest-default-manifest-deployer
identity: manifest-default
useOCMLib: true

deployer:
  verbosityLevel: debug
" > $TMP/manifest-deployer-values.yaml
helm upgrade --kubeconfig=$KUBECONFIG_PATH --install --wait -n ls-system \
  -f $TMP/manifest-deployer-values.yaml manifest-deployer $TMP_GEN/manifest-deployer --set "image.tag=${VERSION}"

echo "Upgrade helm deployer"
printf "
nameOverride: helm-deployer
fullnameOverride: helm-default-helm-deployer
identity: helm-default
useOCMLib: true

deployer:
  verbosityLevel: debug
" > $TMP/helm-deployer-values.yaml
helm upgrade --kubeconfig=$KUBECONFIG_PATH --install --wait -n ls-system \
  -f $TMP/helm-deployer-values.yaml mhelm-deployer $TMP_GEN/helm-deployer --set "image.tag=${VERSION}"

echo "Upgrade container deployer"
printf "
nameOverride: container-deployer
fullnameOverride: container-default-container-deployer
identity: container-default
useOCMLib: true

deployer:
  verbosityLevel: debug
" > $TMP/container-deployer-values.yaml
helm upgrade --kubeconfig=$KUBECONFIG_PATH --install --wait -n ls-system \
  -f $TMP/container-deployer-values.yaml container-deployer $TMP_GEN/container-deployer --set "image.tag=${VERSION}"

echo "Upgrade mock deployer"
printf "
nameOverride: mock-deployer
fullnameOverride: mock-default-mock-deployer
identity: mock-default
useOCMLib: true

deployer:
  verbosityLevel: debug
" > $TMP/mock-deployer-values.yaml
helm upgrade --kubeconfig=$KUBECONFIG_PATH --install --wait -n ls-system \
  -f $TMP/mock-deployer-values.yaml mock-deployer $TMP_GEN/mock-deployer --set "image.tag=${VERSION}"
