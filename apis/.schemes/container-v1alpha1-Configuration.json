{
  "$schema": "https://json-schema.org/draft-07/schema#",
  "definitions": {
    "apis-config-OCICacheConfiguration": {
      "description": "OCICacheConfiguration contains the configuration for the oci cache",
      "type": "object",
      "properties": {
        "path": {
          "description": "Path specifies the path to the oci cache on the filesystem. Defaults to /tmp/ocicache",
          "type": "string",
          "default": ""
        },
        "useInMemoryOverlay": {
          "description": "UseInMemoryOverlay enables an additional in memory overlay cache of oci images",
          "type": "boolean"
        }
      }
    },
    "apis-config-OCIConfiguration": {
      "description": "OCIConfiguration holds configuration for the oci registry",
      "type": "object",
      "required": [
        "allowPlainHttp",
        "insecureSkipVerify"
      ],
      "properties": {
        "allowPlainHttp": {
          "description": "AllowPlainHttp allows the fallback to http if https is not supported by the registry.",
          "type": "boolean",
          "default": false
        },
        "cache": {
          "description": "Cache holds configuration for the oci cache",
          "$ref": "#/definitions/apis-config-OCICacheConfiguration"
        },
        "configFiles": {
          "description": "ConfigFiles path to additional docker configuration files",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "insecureSkipVerify": {
          "description": "InsecureSkipVerify skips the certificate validation of the oci registry",
          "type": "boolean",
          "default": false
        }
      }
    },
    "config-v1alpha1-CommonControllerConfig": {
      "description": "CommonControllerConfig describes common controller configuration that can be included in the specific controller configurations.",
      "type": "object",
      "required": [
        "workers",
        "cacheSyncTimeout"
      ],
      "properties": {
        "cacheSyncTimeout": {
          "description": "CacheSyncTimeout refers to the time limit set to wait for syncing the kubernetes resource caches. Defaults to 2 minutes if not set.",
          "$ref": "#/definitions/meta-v1-Duration"
        },
        "workers": {
          "description": "Workers is the maximum number of concurrent Reconciles which can be run. Defaults to 1.",
          "type": "integer",
          "format": "int32",
          "default": 0
        }
      }
    },
    "container-v1alpha1-ContainerSpec": {
      "description": "ContainerSpec defines a container specification",
      "type": "object",
      "properties": {
        "args": {
          "description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "command": {
          "description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "image": {
          "description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images The image will be defaulted by the container deployer to the configured default.",
          "type": "string"
        },
        "imagePullPolicy": {
          "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images\n\nPossible enum values:\n - `\"Always\"` means that kubelet always attempts to pull the latest image. Container will fail If the pull fails.\n - `\"IfNotPresent\"` means that kubelet pulls if the image isn't present on disk. Container will fail if the image isn't present and the pull fails.\n - `\"Never\"` means that kubelet never pulls an image, but only uses a local image. Container will fail if the image isn't present",
          "type": "string",
          "enum": [
            "Always",
            "IfNotPresent",
            "Never"
          ]
        }
      }
    },
    "container-v1alpha1-Controller": {
      "description": "Controller contains configuration concerning the controller framework.",
      "type": "object",
      "required": [
        "CommonControllerConfig"
      ],
      "properties": {
        "CommonControllerConfig": {
          "default": {},
          "$ref": "#/definitions/config-v1alpha1-CommonControllerConfig"
        }
      }
    },
    "container-v1alpha1-DebugOptions": {
      "description": "DebugOptions defines optional debug options.",
      "type": "object",
      "properties": {
        "keepPod": {
          "description": "KeepPod will only remove the finalizer on the pod but will not delete the pod.",
          "type": "boolean"
        }
      }
    },
    "container-v1alpha1-GarbageCollection": {
      "description": "GarbageCollection defines the container deployer garbage collection configuration.",
      "type": "object",
      "required": [
        "disable",
        "worker",
        "requeueTimeSeconds"
      ],
      "properties": {
        "disable": {
          "description": "Disable disables the garbage collector and the resources clean-up.",
          "type": "boolean",
          "default": false
        },
        "requeueTimeSeconds": {
          "description": "RequeueTime specifies the duration after which the object, which is not yet ready to be garbage collected, is requeued. Defaults to 60.",
          "type": "integer",
          "format": "int32",
          "default": 0
        },
        "worker": {
          "description": "Worker defines the number of parallel garbage collection routines. Defaults to 5.",
          "type": "integer",
          "format": "int32",
          "default": 0
        }
      }
    },
    "container-v1alpha1-HPAConfiguration": {
      "description": "HPAConfiguration contains the configuration for horizontal pod autoscaling.",
      "type": "object",
      "properties": {
        "maxReplicas": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "core-v1alpha1-ObjectReference": {
      "description": "ObjectReference is the reference to a kubernetes object.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name is the name of the kubernetes object.",
          "type": "string",
          "default": ""
        },
        "namespace": {
          "description": "Namespace is the namespace of kubernetes object.",
          "type": "string",
          "default": ""
        }
      }
    },
    "core-v1alpha1-Requirement": {
      "description": "Requirement contains values, a key, and an operator that relates the key and values. The zero value of Requirement is invalid. Requirement implements both set based match and exact match Requirement should be initialized via NewRequirement constructor for creating a valid Requirement.",
      "type": "object",
      "required": [
        "key",
        "operator"
      ],
      "properties": {
        "key": {
          "type": "string",
          "default": ""
        },
        "operator": {
          "type": "string",
          "default": ""
        },
        "values": {
          "description": "In huge majority of cases we have at most one value here. It is generally faster to operate on a single-element slice than on a single-element map, so we have a slice here.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      }
    },
    "core-v1alpha1-TargetSelector": {
      "description": "TargetSelector describes a selector that matches specific targets.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations matches a target based on annotations.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/core-v1alpha1-Requirement"
          }
        },
        "labels": {
          "description": "Labels matches a target based on its labels.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/core-v1alpha1-Requirement"
          }
        },
        "targets": {
          "description": "Targets defines a list of specific targets (name and namespace) that should be reconciled.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/core-v1alpha1-ObjectReference"
          }
        }
      }
    },
    "meta-v1-Duration": {
      "description": "Duration is a wrapper around time.Duration which supports correct marshaling to YAML and JSON. In particular, it marshals into strings, which can be used as map keys in json.",
      "type": "string"
    }
  },
  "description": "Configuration is the container deployer configuration that configures the controller",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "controller": {
      "$ref": "#/definitions/container-v1alpha1-Controller",
      "default": {},
      "description": "Controller contains configuration concerning the controller framework."
    },
    "debug": {
      "$ref": "#/definitions/container-v1alpha1-DebugOptions",
      "description": "DebugOptions configure additional debug options."
    },
    "defaultImage": {
      "$ref": "#/definitions/container-v1alpha1-ContainerSpec",
      "default": {},
      "description": "DefaultImage configures the default images that is used if the DeployItem does not specify one."
    },
    "garbageCollection": {
      "$ref": "#/definitions/container-v1alpha1-GarbageCollection",
      "default": {},
      "description": "GarbageCollection configures the container deployer garbage collector."
    },
    "hpa": {
      "$ref": "#/definitions/container-v1alpha1-HPAConfiguration",
      "description": "HPAConfiguration contains the configuration for horizontal pod autoscaling."
    },
    "identity": {
      "description": "Identity identity describes the unique identity of the deployer.",
      "type": "string"
    },
    "initContainer": {
      "$ref": "#/definitions/container-v1alpha1-ContainerSpec",
      "default": {},
      "description": "InitContainerImage defines the image that is used to init the container. This container bootstraps the necessary directories and files."
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "namespace": {
      "default": "",
      "description": "Namespace defines the namespace where the pods should be executed. Defaults to default",
      "type": "string"
    },
    "oci": {
      "$ref": "#/definitions/apis-config-OCIConfiguration",
      "description": "OCI configures the oci client of the controller"
    },
    "targetSelector": {
      "description": "TargetSelector describes all selectors the deployer should depend on.",
      "items": {
        "$ref": "#/definitions/core-v1alpha1-TargetSelector",
        "default": {}
      },
      "type": "array"
    },
    "waitContainer": {
      "$ref": "#/definitions/container-v1alpha1-ContainerSpec",
      "default": {},
      "description": "SidecarContainerImage defines the image that is used as a sidecar to the defined main container. The sidecar container is responsible to collect the exports and the state of the main container."
    }
  },
  "required": [
    "defaultImage",
    "initContainer",
    "waitContainer",
    "garbageCollection"
  ],
  "title": "container-v1alpha1-Configuration",
  "type": "object"
}