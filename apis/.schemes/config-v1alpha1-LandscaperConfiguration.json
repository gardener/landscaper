{
  "$schema": "https://json-schema.org/draft-07/schema#",
  "definitions": {
    "apis-v2-UnstructuredTypedObject": {
      "description": "UnstructuredTypedObject describes a generic typed object.",
      "type": "object"
    },
    "config-v1alpha1-AdditionalDeployments": {
      "description": "AdditionalDeployments is the definition of additional deployments that shall be watched.",
      "type": "object",
      "required": [
        "deployments"
      ],
      "properties": {
        "deployments": {
          "description": "Deployments is the list of deployments that shall be watched.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      }
    },
    "config-v1alpha1-BlueprintStore": {
      "description": "BlueprintStore contains the configuration for the blueprint store.",
      "type": "object",
      "required": [
        "path",
        "disableCache",
        "GarbageCollectionConfiguration"
      ],
      "properties": {
        "GarbageCollectionConfiguration": {
          "default": {},
          "$ref": "#/definitions/config-v1alpha1-GarbageCollectionConfiguration"
        },
        "disableCache": {
          "description": "DisableCache disables the cache and always fetches the blob from the registry. The blueprint is still stored on the filesystem.",
          "type": "boolean",
          "default": false
        },
        "indexMethod": {
          "description": "IndexMethod describes the method that should be used to index blueprints in the store. If component descriptors and blueprint are immutable (blueprints cannot be updated) use ComponentDescriptorIdentityMethod otherwise use the BlueprintDigestIndex to index by the content hash. Defaults to ComponentDescriptorIdentityMethod",
          "type": "string",
          "default": ""
        },
        "path": {
          "description": "Path defines the root path where the blueprints are cached.",
          "type": "string",
          "default": ""
        }
      }
    },
    "config-v1alpha1-CommonControllerConfig": {
      "description": "CommonControllerConfig describes common controller configuration that can be included in the specific controller configurations.",
      "type": "object",
      "required": [
        "workers",
        "cacheSyncTimeout"
      ],
      "properties": {
        "cacheSyncTimeout": {
          "description": "CacheSyncTimeout refers to the time limit set to wait for syncing the kubernetes resource caches. Defaults to 2 minutes if not set.",
          "$ref": "#/definitions/meta-v1-Duration"
        },
        "workers": {
          "description": "Workers is the maximum number of concurrent Reconciles which can be run. Defaults to 1.",
          "type": "integer",
          "format": "int32",
          "default": 0
        }
      }
    },
    "config-v1alpha1-ContextControllerConfig": {
      "description": "ContextControllerConfig contains the context specific configuration.",
      "type": "object",
      "required": [
        "default"
      ],
      "properties": {
        "default": {
          "default": {},
          "$ref": "#/definitions/config-v1alpha1-ContextControllerDefaultConfig"
        }
      }
    },
    "config-v1alpha1-ContextControllerDefaultConfig": {
      "description": "ContextControllerDefaultConfig contains the configuration for the context defaults.",
      "type": "object",
      "required": [
        "disable"
      ],
      "properties": {
        "disable": {
          "description": "Disable disables the default controller. If disabled no default contexts are created.",
          "type": "boolean",
          "default": false
        },
        "excludedNamespaces": {
          "description": "ExcludedNamespaces defines a list of namespaces where no default context should be created.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "repositoryContext": {
          "description": "RepositoryContext defines the default repository context that should be used to resolve component descriptors.",
          "$ref": "#/definitions/apis-v2-UnstructuredTypedObject"
        }
      }
    },
    "config-v1alpha1-ContextsController": {
      "description": "ContextsController contains all configuration for the context controller.",
      "type": "object",
      "required": [
        "CommonControllerConfig",
        "config"
      ],
      "properties": {
        "CommonControllerConfig": {
          "default": {},
          "$ref": "#/definitions/config-v1alpha1-CommonControllerConfig"
        },
        "config": {
          "default": {},
          "$ref": "#/definitions/config-v1alpha1-ContextControllerConfig"
        }
      }
    },
    "config-v1alpha1-Controllers": {
      "description": "Controllers contains all configuration for the specific controllers",
      "type": "object",
      "required": [
        "syncPeriod",
        "installations",
        "executions",
        "deployItems",
        "contexts"
      ],
      "properties": {
        "contexts": {
          "description": "Contexts contains the controller config that reconciles context objects.",
          "default": {},
          "$ref": "#/definitions/config-v1alpha1-ContextsController"
        },
        "deployItems": {
          "description": "DeployItems contains the controller config that reconciles deploy items.",
          "default": {},
          "$ref": "#/definitions/config-v1alpha1-DeployItemsController"
        },
        "executions": {
          "description": "Installations contains the controller config that reconciles executions.",
          "default": {},
          "$ref": "#/definitions/config-v1alpha1-ExecutionsController"
        },
        "installations": {
          "description": "Installations contains the controller config that reconciles installations.",
          "default": {},
          "$ref": "#/definitions/config-v1alpha1-InstallationsController"
        },
        "syncPeriod": {
          "description": "SyncPeriod determines the minimum frequency at which watched resources are reconciled. A lower period will correct entropy more quickly, but reduce responsiveness to change if there are many watched resources. Change this value only if you know what you are doing. Defaults to 10 hours if unset. there will a 10 percent jitter between the SyncPeriod of all controllers so that all controllers will not send list requests simultaneously.\n\nThis applies to all controllers.\n\nA period sync happens for two reasons: 1. To insure against a bug in the controller that causes an object to not be requeued, when it otherwise should be requeued. 2. To insure against an unknown bug in controller-runtime, or its dependencies, that causes an object to not be requeued, when it otherwise should be requeued, or to be removed from the queue, when it otherwise should not be removed.",
          "$ref": "#/definitions/meta-v1-Duration"
        }
      }
    },
    "config-v1alpha1-CrdManagementConfiguration": {
      "description": "CrdManagementConfiguration contains the configuration of the CRD management",
      "type": "object",
      "required": [
        "deployCrd"
      ],
      "properties": {
        "deployCrd": {
          "description": "DeployCustomResourceDefinitions specifies if CRDs should be deployed",
          "type": "boolean"
        },
        "forceUpdate": {
          "description": "ForceUpdate specifies whether existing CRDs should be updated",
          "type": "boolean"
        }
      }
    },
    "config-v1alpha1-DeployItemTimeouts": {
      "description": "DeployItemTimeouts contains multiple timeout configurations for deploy items",
      "type": "object",
      "properties": {
        "abort": {
          "description": "Abort specifies how long the deployer may take to abort handling a deploy item after getting the abort annotation. Allowed values are 'none' (to disable abort timeout detection) and anything that is understood by golang's time.ParseDuration method. Defaults to five minutes if not specified.",
          "$ref": "#/definitions/core-v1alpha1-Duration"
        },
        "pickup": {
          "description": "PickupTimeout defines how long a deployer can take to react on changes to a deploy item before the landscaper will mark it as failed. Allowed values are 'none' (to disable pickup timeout detection) and anything that is understood by golang's time.ParseDuration method. Defaults to five minutes if not specified.",
          "$ref": "#/definitions/core-v1alpha1-Duration"
        },
        "progressingDefault": {
          "description": "ProgressingDefault specifies how long the deployer may take to apply a deploy item by default. The value can be overwritten per deploy item in 'spec.timeout'. Allowed values are 'none' (to disable abort timeout detection) and anything that is understood by golang's time.ParseDuration method. Defaults to ten minutes if not specified.",
          "$ref": "#/definitions/core-v1alpha1-Duration"
        }
      }
    },
    "config-v1alpha1-DeployItemsController": {
      "description": "DeployItemsController contains the controller config that reconciles deploy items.",
      "type": "object",
      "required": [
        "CommonControllerConfig"
      ],
      "properties": {
        "CommonControllerConfig": {
          "default": {},
          "$ref": "#/definitions/config-v1alpha1-CommonControllerConfig"
        }
      }
    },
    "config-v1alpha1-DeployerManagementConfiguration": {
      "description": "DeployerManagementConfiguration contains the configuration of the deployer management",
      "type": "object",
      "required": [
        "disable",
        "namespace",
        "agent"
      ],
      "properties": {
        "agent": {
          "description": "Agent contains the landscaper agent configuration.",
          "default": {},
          "$ref": "#/definitions/config-v1alpha1-LandscaperAgentConfiguration"
        },
        "deployerRepositoryContext": {
          "description": "DeployerRepositoryContext defines the repository context to fetch the component descriptors for the default deployer (helm, container, manifest). If not set, the open source repository context is used.",
          "$ref": "#/definitions/apis-v2-UnstructuredTypedObject"
        },
        "disable": {
          "description": "Disable disables the landscaper deployer management.",
          "type": "boolean",
          "default": false
        },
        "namespace": {
          "description": "Namespace defines the system namespace where the deployer installation should be deployed to.",
          "type": "string",
          "default": ""
        }
      }
    },
    "config-v1alpha1-ExecutionsController": {
      "description": "ExecutionsController contains the controller config that reconciles executions.",
      "type": "object",
      "required": [
        "CommonControllerConfig"
      ],
      "properties": {
        "CommonControllerConfig": {
          "default": {},
          "$ref": "#/definitions/config-v1alpha1-CommonControllerConfig"
        }
      }
    },
    "config-v1alpha1-GarbageCollectionConfiguration": {
      "description": "GarbageCollectionConfiguration contains all options for the cache garbage collection.",
      "type": "object",
      "required": [
        "gcLowThreshold"
      ],
      "properties": {
        "gcHighThreshold": {
          "description": "GCHighThreshold defines the percent of disk usage which triggers files garbage collection.",
          "type": "number",
          "format": "double"
        },
        "gcLowThreshold": {
          "description": "GCLowThreshold defines the percent of disk usage to which files garbage collection attempts to free.",
          "type": "number",
          "format": "double",
          "default": 0
        },
        "preservedHitsProportion": {
          "description": "PreservedHitsProportion defines the percent of hits that should be preserved.",
          "type": "number",
          "format": "double"
        },
        "resetInterval": {
          "description": "ResetInterval defines the interval when the hit reset should run.",
          "$ref": "#/definitions/meta-v1-Duration"
        },
        "size": {
          "description": "Size is the size of the filesystem. If the value is 0 there is no limit and no garbage collection will happen. See the kubernetes quantity docs for detailed description of the format https://github.com/kubernetes/apimachinery/blob/master/pkg/api/resource/quantity.go",
          "type": "string"
        }
      }
    },
    "config-v1alpha1-HPAMainConfiguration": {
      "description": "HPAMainConfiguration contains the HPA configuration (horizontal pod autoscaling) for the main controllers (Installation and Execution controller).",
      "type": "object",
      "properties": {
        "maxReplicas": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "config-v1alpha1-InstallationsController": {
      "description": "InstallationsController contains the controller config that reconciles installations.",
      "type": "object",
      "required": [
        "CommonControllerConfig"
      ],
      "properties": {
        "CommonControllerConfig": {
          "default": {},
          "$ref": "#/definitions/config-v1alpha1-CommonControllerConfig"
        }
      }
    },
    "config-v1alpha1-LandscaperAgentConfiguration": {
      "description": "LandscaperAgentConfiguration is the landscaper specific agent configuration",
      "type": "object",
      "required": [
        "disable",
        "name"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "disable": {
          "description": "Disable disables the default agent that is started with the landscaper. This is automatically disabled if the deployment management is disabled.",
          "type": "boolean",
          "default": false
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "landscaperNamespace": {
          "description": "LandscaperNamespace is the namespace in the landscaper cluster where the installations and target for the deployers are stored. Defaults to ls-system",
          "type": "string"
        },
        "name": {
          "description": "Name is the name for the agent and environment. This name has to be landscaper globally unique.",
          "type": "string",
          "default": ""
        },
        "namespace": {
          "description": "Namespace is the namespace in the host cluster where the deployers should be installed. Defaults to ls-system",
          "type": "string"
        },
        "oci": {
          "description": "OCI defines a oci registry to use for definitions",
          "$ref": "#/definitions/config-v1alpha1-OCIConfiguration"
        },
        "targetSelectors": {
          "description": "TargetSelectors defines the target selector that is applied to all installed deployers",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/core-v1alpha1-TargetSelector"
          }
        }
      }
    },
    "config-v1alpha1-LocalRegistryConfiguration": {
      "description": "LocalRegistryConfiguration contains the configuration for a local registry",
      "type": "object",
      "required": [
        "rootPath"
      ],
      "properties": {
        "rootPath": {
          "description": "RootPath configures the root path of a local registry. This path is used to search for components locally.",
          "type": "string",
          "default": ""
        }
      }
    },
    "config-v1alpha1-LsDeployments": {
      "description": "LsDeployments contains the names of the landscaper deployments.",
      "type": "object",
      "required": [
        "lsController",
        "webHook",
        "deploymentsNamespace",
        "lsHealthCheckName"
      ],
      "properties": {
        "additionalDeployments": {
          "description": "AdditionalDeployments is the definition of additional deployments that shall be watched.",
          "$ref": "#/definitions/config-v1alpha1-AdditionalDeployments"
        },
        "deploymentsNamespace": {
          "description": "DeploymentsNamespace is the namespace in which the deployments are located.",
          "type": "string",
          "default": ""
        },
        "lsController": {
          "description": "LsController is the name of the Landscaper controller deployment.",
          "type": "string",
          "default": ""
        },
        "lsHealthCheckName": {
          "description": "LsHealthCheckName is the name of the LsHealthCheck object.",
          "type": "string",
          "default": ""
        },
        "webHook": {
          "description": "LsController is the name of the Landscaper webhook server deployment.",
          "type": "string",
          "default": ""
        }
      }
    },
    "config-v1alpha1-MetricsConfiguration": {
      "description": "MetricsConfiguration allows to configure how metrics are exposed",
      "type": "object",
      "required": [
        "port"
      ],
      "properties": {
        "port": {
          "description": "Port specifies the port on which metrics are published",
          "type": "integer",
          "format": "int32",
          "default": 0
        }
      }
    },
    "config-v1alpha1-OCICacheConfiguration": {
      "description": "OCICacheConfiguration contains the configuration for the oci cache",
      "type": "object",
      "properties": {
        "path": {
          "description": "Path specifies the path to the oci cache on the filesystem. Defaults to /tmp/ocicache",
          "type": "string",
          "default": ""
        },
        "useInMemoryOverlay": {
          "description": "UseInMemoryOverlay enables an additional in memory overlay cache of oci images",
          "type": "boolean"
        }
      }
    },
    "config-v1alpha1-OCIConfiguration": {
      "description": "OCIConfiguration holds configuration for the oci registry",
      "type": "object",
      "required": [
        "allowPlainHttp",
        "insecureSkipVerify"
      ],
      "properties": {
        "allowPlainHttp": {
          "description": "AllowPlainHttp allows the fallback to http if https is not supported by the registry.",
          "type": "boolean",
          "default": false
        },
        "cache": {
          "description": "Cache holds configuration for the oci cache",
          "$ref": "#/definitions/config-v1alpha1-OCICacheConfiguration"
        },
        "configFiles": {
          "description": "ConfigFiles path to additional docker configuration files",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "insecureSkipVerify": {
          "description": "InsecureSkipVerify skips the certificate validation of the oci registry",
          "type": "boolean",
          "default": false
        }
      }
    },
    "config-v1alpha1-RegistryConfiguration": {
      "description": "RegistryConfiguration contains the configuration for the used definition registry",
      "type": "object",
      "properties": {
        "local": {
          "description": "Local defines a local registry to use for definitions",
          "$ref": "#/definitions/config-v1alpha1-LocalRegistryConfiguration"
        },
        "oci": {
          "description": "OCI defines a oci registry to use for definitions",
          "$ref": "#/definitions/config-v1alpha1-OCIConfiguration"
        }
      }
    },
    "core-v1alpha1-Duration": {
      "description": "Duration is a wrapper for time.Duration that implements JSON marshalling and openapi scheme.",
      "type": "string"
    },
    "core-v1alpha1-ObjectReference": {
      "description": "ObjectReference is the reference to a kubernetes object.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name is the name of the kubernetes object.",
          "type": "string",
          "default": ""
        },
        "namespace": {
          "description": "Namespace is the namespace of kubernetes object.",
          "type": "string",
          "default": ""
        }
      }
    },
    "core-v1alpha1-Requirement": {
      "description": "Requirement contains values, a key, and an operator that relates the key and values. The zero value of Requirement is invalid. Requirement implements both set based match and exact match Requirement should be initialized via NewRequirement constructor for creating a valid Requirement.",
      "type": "object",
      "required": [
        "key",
        "operator"
      ],
      "properties": {
        "key": {
          "type": "string",
          "default": ""
        },
        "operator": {
          "type": "string",
          "default": ""
        },
        "values": {
          "description": "In huge majority of cases we have at most one value here. It is generally faster to operate on a single-element slice than on a single-element map, so we have a slice here.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      }
    },
    "core-v1alpha1-TargetSelector": {
      "description": "TargetSelector describes a selector that matches specific targets.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations matches a target based on annotations.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/core-v1alpha1-Requirement"
          }
        },
        "labels": {
          "description": "Labels matches a target based on its labels.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/core-v1alpha1-Requirement"
          }
        },
        "targets": {
          "description": "Targets defines a list of specific targets (name and namespace) that should be reconciled.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/core-v1alpha1-ObjectReference"
          }
        }
      }
    },
    "meta-v1-Duration": {
      "description": "Duration is a wrapper around time.Duration which supports correct marshaling to YAML and JSON. In particular, it marshals into strings, which can be used as map keys in json.",
      "type": "string"
    }
  },
  "description": "LandscaperConfiguration contains all configuration for the landscaper controllers",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "blueprintStore": {
      "$ref": "#/definitions/config-v1alpha1-BlueprintStore",
      "default": {},
      "description": "BlueprintStore contains the configuration for the blueprint cache."
    },
    "controllers": {
      "$ref": "#/definitions/config-v1alpha1-Controllers",
      "default": {},
      "description": "Controllers contains all controller specific configuration."
    },
    "crdManagement": {
      "$ref": "#/definitions/config-v1alpha1-CrdManagementConfiguration",
      "default": {},
      "description": "CrdManagement configures whether the landscaper controller should deploy the CRDs it needs into the cluster"
    },
    "deployItemTimeouts": {
      "$ref": "#/definitions/config-v1alpha1-DeployItemTimeouts",
      "description": "DeployItemTimeouts contains configuration for multiple deploy item timeouts"
    },
    "deployerManagement": {
      "$ref": "#/definitions/config-v1alpha1-DeployerManagementConfiguration",
      "default": {},
      "description": "DeployerManagement configures the deployer management of the landscaper."
    },
    "hpaMain": {
      "$ref": "#/definitions/config-v1alpha1-HPAMainConfiguration",
      "description": "HPAMainConfiguration contains the HPA configuration (horizontal pod autoscaling) for the main controllers (Installation and Execution controller)."
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "lsDeployments": {
      "$ref": "#/definitions/config-v1alpha1-LsDeployments",
      "description": "LsDeployments contains the names of the landscaper deployments"
    },
    "metrics": {
      "$ref": "#/definitions/config-v1alpha1-MetricsConfiguration",
      "description": "Metrics allows to configure how metrics are exposed"
    },
    "registry": {
      "$ref": "#/definitions/config-v1alpha1-RegistryConfiguration",
      "default": {},
      "description": "Registry configures the landscaper registry to resolve component descriptors, blueprints and other artifacts."
    },
    "repositoryContext": {
      "$ref": "#/definitions/apis-v2-UnstructuredTypedObject",
      "description": "RepositoryContext defines the default repository context that should be used to resolve component descriptors. DEPRECATED: use controllers.context.config.default.repositoryContext instead."
    }
  },
  "required": [
    "controllers",
    "registry",
    "blueprintStore"
  ],
  "title": "config-v1alpha1-LandscaperConfiguration",
  "type": "object"
}