{
  "$schema": "https://json-schema.org/draft-07/schema#",
  "definitions": {
    "apis-config-OCICacheConfiguration": {
      "description": "OCICacheConfiguration contains the configuration for the oci cache",
      "type": "object",
      "properties": {
        "path": {
          "description": "Path specifies the path to the oci cache on the filesystem. Defaults to /tmp/ocicache",
          "type": "string",
          "default": ""
        },
        "useInMemoryOverlay": {
          "description": "UseInMemoryOverlay enables an additional in memory overlay cache of oci images",
          "type": "boolean"
        }
      }
    },
    "apis-config-OCIConfiguration": {
      "description": "OCIConfiguration holds configuration for the oci registry",
      "type": "object",
      "required": [
        "allowPlainHttp",
        "insecureSkipVerify"
      ],
      "properties": {
        "allowPlainHttp": {
          "description": "AllowPlainHttp allows the fallback to http if https is not supported by the registry.",
          "type": "boolean",
          "default": false
        },
        "cache": {
          "description": "Cache holds configuration for the oci cache",
          "$ref": "#/definitions/apis-config-OCICacheConfiguration"
        },
        "configFiles": {
          "description": "ConfigFiles path to additional docker configuration files",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "insecureSkipVerify": {
          "description": "InsecureSkipVerify skips the certificate validation of the oci registry",
          "type": "boolean",
          "default": false
        }
      }
    },
    "config-v1alpha1-CommonControllerConfig": {
      "description": "CommonControllerConfig describes common controller configuration that can be included in the specific controller configurations.",
      "type": "object",
      "required": [
        "workers",
        "cacheSyncTimeout"
      ],
      "properties": {
        "cacheSyncTimeout": {
          "description": "CacheSyncTimeout refers to the time limit set to wait for syncing the kubernetes resource caches. Defaults to 2 minutes if not set.",
          "$ref": "#/definitions/meta-v1-Duration"
        },
        "workers": {
          "description": "Workers is the maximum number of concurrent Reconciles which can be run. Defaults to 1.",
          "type": "integer",
          "format": "int32",
          "default": 0
        }
      }
    },
    "core-v1alpha1-Duration": {
      "description": "Duration is a wrapper for time.Duration that implements JSON marshalling and openapi scheme.",
      "type": "string"
    },
    "core-v1alpha1-ObjectReference": {
      "description": "ObjectReference is the reference to a kubernetes object.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name is the name of the kubernetes object.",
          "type": "string",
          "default": ""
        },
        "namespace": {
          "description": "Namespace is the namespace of kubernetes object.",
          "type": "string",
          "default": ""
        }
      }
    },
    "core-v1alpha1-Requirement": {
      "description": "Requirement contains values, a key, and an operator that relates the key and values. The zero value of Requirement is invalid. Requirement implements both set based match and exact match Requirement should be initialized via NewRequirement constructor for creating a valid Requirement.",
      "type": "object",
      "required": [
        "key",
        "operator"
      ],
      "properties": {
        "key": {
          "type": "string",
          "default": ""
        },
        "operator": {
          "type": "string",
          "default": ""
        },
        "values": {
          "description": "In huge majority of cases we have at most one value here. It is generally faster to operate on a single-element slice than on a single-element map, so we have a slice here.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      }
    },
    "core-v1alpha1-TargetSelector": {
      "description": "TargetSelector describes a selector that matches specific targets.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations matches a target based on annotations.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/core-v1alpha1-Requirement"
          }
        },
        "labels": {
          "description": "Labels matches a target based on its labels.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/core-v1alpha1-Requirement"
          }
        },
        "targets": {
          "description": "Targets defines a list of specific targets (name and namespace) that should be reconciled.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/core-v1alpha1-ObjectReference"
          }
        }
      }
    },
    "helm-v1alpha1-Controller": {
      "description": "Controller contains configuration concerning the controller framework.",
      "type": "object",
      "required": [
        "CommonControllerConfig"
      ],
      "properties": {
        "CommonControllerConfig": {
          "default": {},
          "$ref": "#/definitions/config-v1alpha1-CommonControllerConfig"
        }
      }
    },
    "helm-v1alpha1-ExportConfiguration": {
      "description": "ExportConfiguration defines the export configuration for the deployer.",
      "type": "object",
      "properties": {
        "defaultTimeout": {
          "description": "DefaultTimeout configures the default timeout for all exports without a explicit export timeout defined.",
          "$ref": "#/definitions/core-v1alpha1-Duration"
        }
      }
    },
    "helm-v1alpha1-HPAConfiguration": {
      "description": "HPAConfiguration contains the configuration for horizontal pod autoscaling.",
      "type": "object",
      "properties": {
        "maxReplicas": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "meta-v1-Duration": {
      "description": "Duration is a wrapper around time.Duration which supports correct marshaling to YAML and JSON. In particular, it marshals into strings, which can be used as map keys in json.",
      "type": "string"
    }
  },
  "description": "Configuration is the helm deployer configuration that configures the controller",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "controller": {
      "$ref": "#/definitions/helm-v1alpha1-Controller",
      "default": {},
      "description": "Controller contains configuration concerning the controller framework."
    },
    "export": {
      "$ref": "#/definitions/helm-v1alpha1-ExportConfiguration",
      "default": {},
      "description": "Export defines the export configuration."
    },
    "hpa": {
      "$ref": "#/definitions/helm-v1alpha1-HPAConfiguration",
      "description": "HPAConfiguration contains the configuration for horizontal pod autoscaling."
    },
    "identity": {
      "description": "Identity identity describes the unique identity of the deployer.",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "oci": {
      "$ref": "#/definitions/apis-config-OCIConfiguration",
      "description": "OCI configures the oci client of the controller"
    },
    "targetSelector": {
      "description": "TargetSelector describes all selectors the deployer should depend on.",
      "items": {
        "$ref": "#/definitions/core-v1alpha1-TargetSelector",
        "default": {}
      },
      "type": "array"
    }
  },
  "title": "helm-v1alpha1-Configuration",
  "type": "object"
}